// Code generated by goa v3.10.2, DO NOT EDIT.
//
// item gRPC client CLI support package
//
// Command:
// $ goa gen gaucho/services/item/design -o services/item

package client

import (
	"encoding/json"
	"fmt"
	itempb "gaucho/services/item/gen/grpc/item/pb"
	item "gaucho/services/item/gen/item"
)

// BuildGetPayload builds the payload for the item get endpoint from CLI flags.
func BuildGetPayload(itemGetMessage string) (uint32, error) {
	var err error
	var message itempb.GetRequest
	{
		if itemGetMessage != "" {
			err = json.Unmarshal([]byte(itemGetMessage), &message)
			if err != nil {
				var zero uint32
				return zero, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"field\": 893706942\n   }'")
			}
		}
	}
	v := message.Field
	return v, nil
}

// BuildAddPayload builds the payload for the item add endpoint from CLI flags.
func BuildAddPayload(itemAddMessage string) (*item.Item, error) {
	var err error
	var message itempb.AddRequest
	{
		if itemAddMessage != "" {
			err = json.Unmarshal([]byte(itemAddMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"damage\": 11,\n      \"description\": \"Enim eum est et commodi.\",\n      \"healing\": 20,\n      \"name\": \"pgd\",\n      \"protection\": 19\n   }'")
			}
		}
	}
	v := &item.Item{
		Name:        message.Name,
		Description: message.Description,
		Damage:      int(message.Damage),
		Healing:     int(message.Healing),
		Protection:  int(message.Protection),
	}

	return v, nil
}

// BuildUpdatePayload builds the payload for the item update endpoint from CLI
// flags.
func BuildUpdatePayload(itemUpdateMessage string) (*item.UpdatePayload, error) {
	var err error
	var message itempb.UpdateRequest
	{
		if itemUpdateMessage != "" {
			err = json.Unmarshal([]byte(itemUpdateMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"id\": 1795403724,\n      \"item\": {\n         \"damage\": 10,\n         \"description\": \"Rem hic doloribus tempora placeat.\",\n         \"healing\": 27,\n         \"name\": \"phb\",\n         \"protection\": 4\n      }\n   }'")
			}
		}
	}
	v := &item.UpdatePayload{
		ID: message.Id,
	}
	if message.Item != nil {
		v.Item = protobufItempbItem2ToItemItem(message.Item)
	}

	return v, nil
}

// BuildRemovePayload builds the payload for the item remove endpoint from CLI
// flags.
func BuildRemovePayload(itemRemoveMessage string) (*item.RemovePayload, error) {
	var err error
	var message itempb.RemoveRequest
	{
		if itemRemoveMessage != "" {
			err = json.Unmarshal([]byte(itemRemoveMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"id\": 3738918782\n   }'")
			}
		}
	}
	v := &item.RemovePayload{
		ID: message.Id,
	}

	return v, nil
}
