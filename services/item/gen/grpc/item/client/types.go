// Code generated by goa v3.10.2, DO NOT EDIT.
//
// item gRPC client types
//
// Command:
// $ goa gen gaucho/services/item/design -o services/item

package client

import (
	itempb "gaucho/services/item/gen/grpc/item/pb"
	item "gaucho/services/item/gen/item"
	itemviews "gaucho/services/item/gen/item/views"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// NewProtoGetRequest builds the gRPC request type from the payload of the
// "get" endpoint of the "item" service.
func NewProtoGetRequest(payload uint32) *itempb.GetRequest {
	message := &itempb.GetRequest{}
	message.Field = payload
	return message
}

// NewGetResult builds the result type of the "get" endpoint of the "item"
// service from the gRPC response type.
func NewGetResult(message *itempb.GetResponse) *itemviews.StoredItemView {
	result := &itemviews.StoredItemView{
		ID:          &message.Id,
		Name:        &message.Name,
		Description: message.Description,
	}
	damage := int(message.Damage)
	result.Damage = &damage
	healing := int(message.Healing)
	result.Healing = &healing
	protection := int(message.Protection)
	result.Protection = &protection
	return result
}

// NewProtoGetAllRequest builds the gRPC request type from the payload of the
// "get_all" endpoint of the "item" service.
func NewProtoGetAllRequest() *itempb.GetAllRequest {
	message := &itempb.GetAllRequest{}
	return message
}

// NewGetAllResult builds the result type of the "get_all" endpoint of the
// "item" service from the gRPC response type.
func NewGetAllResult(message *itempb.GetAllResponse) []*item.StoredItem {
	result := make([]*item.StoredItem, len(message.Field))
	for i, val := range message.Field {
		result[i] = &item.StoredItem{
			ID:          val.Id,
			Name:        val.Name,
			Description: val.Description,
			Damage:      int(val.Damage),
			Healing:     int(val.Healing),
			Protection:  int(val.Protection),
		}
	}
	return result
}

// NewProtoAddRequest builds the gRPC request type from the payload of the
// "add" endpoint of the "item" service.
func NewProtoAddRequest(payload *item.Item) *itempb.AddRequest {
	message := &itempb.AddRequest{
		Name:        payload.Name,
		Description: payload.Description,
		Damage:      int32(payload.Damage),
		Healing:     int32(payload.Healing),
		Protection:  int32(payload.Protection),
	}
	return message
}

// NewAddResult builds the result type of the "add" endpoint of the "item"
// service from the gRPC response type.
func NewAddResult(message *itempb.AddResponse) *itemviews.StoredItemView {
	result := &itemviews.StoredItemView{
		ID:          &message.Id,
		Name:        &message.Name,
		Description: message.Description,
	}
	damage := int(message.Damage)
	result.Damage = &damage
	healing := int(message.Healing)
	result.Healing = &healing
	protection := int(message.Protection)
	result.Protection = &protection
	return result
}

// NewProtoUpdateRequest builds the gRPC request type from the payload of the
// "update" endpoint of the "item" service.
func NewProtoUpdateRequest(payload *item.UpdatePayload) *itempb.UpdateRequest {
	message := &itempb.UpdateRequest{
		Id: payload.ID,
	}
	if payload.Item != nil {
		message.Item = svcItemItemToItempbItem2(payload.Item)
	}
	return message
}

// NewUpdateResult builds the result type of the "update" endpoint of the
// "item" service from the gRPC response type.
func NewUpdateResult(message *itempb.UpdateResponse) *itemviews.StoredItemView {
	result := &itemviews.StoredItemView{
		ID:          &message.Id,
		Name:        &message.Name,
		Description: message.Description,
	}
	damage := int(message.Damage)
	result.Damage = &damage
	healing := int(message.Healing)
	result.Healing = &healing
	protection := int(message.Protection)
	result.Protection = &protection
	return result
}

// NewProtoRemoveRequest builds the gRPC request type from the payload of the
// "remove" endpoint of the "item" service.
func NewProtoRemoveRequest(payload *item.RemovePayload) *itempb.RemoveRequest {
	message := &itempb.RemoveRequest{
		Id: payload.ID,
	}
	return message
}

// ValidateGetResponse runs the validations defined on GetResponse.
func ValidateGetResponse(message *itempb.GetResponse) (err error) {
	if utf8.RuneCountInString(message.Name) < 2 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("message.name", message.Name, utf8.RuneCountInString(message.Name), 2, true))
	}
	if utf8.RuneCountInString(message.Name) > 50 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("message.name", message.Name, utf8.RuneCountInString(message.Name), 50, false))
	}
	if message.Damage < 0 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("message.damage", message.Damage, 0, true))
	}
	if message.Damage > 25 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("message.damage", message.Damage, 25, false))
	}
	if message.Healing < 0 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("message.healing", message.Healing, 0, true))
	}
	if message.Healing > 50 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("message.healing", message.Healing, 50, false))
	}
	if message.Protection < 0 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("message.protection", message.Protection, 0, true))
	}
	if message.Protection > 20 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("message.protection", message.Protection, 20, false))
	}
	return
}

// ValidateGetAllResponse runs the validations defined on GetAllResponse.
func ValidateGetAllResponse(message *itempb.GetAllResponse) (err error) {
	for _, e := range message.Field {
		if e != nil {
			if err2 := ValidateStoredItem(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateStoredItem runs the validations defined on StoredItem.
func ValidateStoredItem(elem *itempb.StoredItem) (err error) {
	if utf8.RuneCountInString(elem.Name) < 2 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("elem.name", elem.Name, utf8.RuneCountInString(elem.Name), 2, true))
	}
	if utf8.RuneCountInString(elem.Name) > 50 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("elem.name", elem.Name, utf8.RuneCountInString(elem.Name), 50, false))
	}
	if elem.Damage < 0 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("elem.damage", elem.Damage, 0, true))
	}
	if elem.Damage > 25 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("elem.damage", elem.Damage, 25, false))
	}
	if elem.Healing < 0 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("elem.healing", elem.Healing, 0, true))
	}
	if elem.Healing > 50 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("elem.healing", elem.Healing, 50, false))
	}
	if elem.Protection < 0 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("elem.protection", elem.Protection, 0, true))
	}
	if elem.Protection > 20 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("elem.protection", elem.Protection, 20, false))
	}
	return
}

// ValidateAddResponse runs the validations defined on AddResponse.
func ValidateAddResponse(message *itempb.AddResponse) (err error) {
	if utf8.RuneCountInString(message.Name) < 2 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("message.name", message.Name, utf8.RuneCountInString(message.Name), 2, true))
	}
	if utf8.RuneCountInString(message.Name) > 50 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("message.name", message.Name, utf8.RuneCountInString(message.Name), 50, false))
	}
	if message.Damage < 0 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("message.damage", message.Damage, 0, true))
	}
	if message.Damage > 25 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("message.damage", message.Damage, 25, false))
	}
	if message.Healing < 0 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("message.healing", message.Healing, 0, true))
	}
	if message.Healing > 50 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("message.healing", message.Healing, 50, false))
	}
	if message.Protection < 0 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("message.protection", message.Protection, 0, true))
	}
	if message.Protection > 20 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("message.protection", message.Protection, 20, false))
	}
	return
}

// ValidateUpdateResponse runs the validations defined on UpdateResponse.
func ValidateUpdateResponse(message *itempb.UpdateResponse) (err error) {
	if utf8.RuneCountInString(message.Name) < 2 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("message.name", message.Name, utf8.RuneCountInString(message.Name), 2, true))
	}
	if utf8.RuneCountInString(message.Name) > 50 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("message.name", message.Name, utf8.RuneCountInString(message.Name), 50, false))
	}
	if message.Damage < 0 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("message.damage", message.Damage, 0, true))
	}
	if message.Damage > 25 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("message.damage", message.Damage, 25, false))
	}
	if message.Healing < 0 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("message.healing", message.Healing, 0, true))
	}
	if message.Healing > 50 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("message.healing", message.Healing, 50, false))
	}
	if message.Protection < 0 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("message.protection", message.Protection, 0, true))
	}
	if message.Protection > 20 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("message.protection", message.Protection, 20, false))
	}
	return
}

// protobufItempbItem2ToItemItem builds a value of type *item.Item from a value
// of type *itempb.Item2.
func protobufItempbItem2ToItemItem(v *itempb.Item2) *item.Item {
	res := &item.Item{
		Name:        v.Name,
		Description: v.Description,
		Damage:      int(v.Damage),
		Healing:     int(v.Healing),
		Protection:  int(v.Protection),
	}

	return res
}

// svcItemItemToItempbItem2 builds a value of type *itempb.Item2 from a value
// of type *item.Item.
func svcItemItemToItempbItem2(v *item.Item) *itempb.Item2 {
	res := &itempb.Item2{
		Name:        v.Name,
		Description: v.Description,
		Damage:      int32(v.Damage),
		Healing:     int32(v.Healing),
		Protection:  int32(v.Protection),
	}

	return res
}
