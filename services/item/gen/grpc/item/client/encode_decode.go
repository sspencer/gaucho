// Code generated by goa v3.10.2, DO NOT EDIT.
//
// item gRPC client encoders and decoders
//
// Command:
// $ goa gen gaucho/services/item/design -o services/item

package client

import (
	"context"
	itempb "gaucho/services/item/gen/grpc/item/pb"
	item "gaucho/services/item/gen/item"
	itemviews "gaucho/services/item/gen/item/views"

	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

// BuildGetFunc builds the remote method to invoke for "item" service "get"
// endpoint.
func BuildGetFunc(grpccli itempb.ItemClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Get(ctx, reqpb.(*itempb.GetRequest), opts...)
		}
		return grpccli.Get(ctx, &itempb.GetRequest{}, opts...)
	}
}

// EncodeGetRequest encodes requests sent to item get endpoint.
func EncodeGetRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(uint32)
	if !ok {
		return nil, goagrpc.ErrInvalidType("item", "get", "uint32", v)
	}
	return NewProtoGetRequest(payload), nil
}

// DecodeGetResponse decodes responses from the item get endpoint.
func DecodeGetResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	var view string
	{
		if vals := hdr.Get("goa-view"); len(vals) > 0 {
			view = vals[0]
		}
	}
	message, ok := v.(*itempb.GetResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("item", "get", "*itempb.GetResponse", v)
	}
	res := NewGetResult(message)
	vres := &itemviews.StoredItem{Projected: res, View: view}
	if err := itemviews.ValidateStoredItem(vres); err != nil {
		return nil, err
	}
	return item.NewStoredItem(vres), nil
}

// BuildGetAllFunc builds the remote method to invoke for "item" service
// "get_all" endpoint.
func BuildGetAllFunc(grpccli itempb.ItemClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.GetAll(ctx, reqpb.(*itempb.GetAllRequest), opts...)
		}
		return grpccli.GetAll(ctx, &itempb.GetAllRequest{}, opts...)
	}
}

// DecodeGetAllResponse decodes responses from the item get_all endpoint.
func DecodeGetAllResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	message, ok := v.(*itempb.GetAllResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("item", "get_all", "*itempb.GetAllResponse", v)
	}
	if err := ValidateGetAllResponse(message); err != nil {
		return nil, err
	}
	res := NewGetAllResult(message)
	return res, nil
}

// BuildAddFunc builds the remote method to invoke for "item" service "add"
// endpoint.
func BuildAddFunc(grpccli itempb.ItemClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Add(ctx, reqpb.(*itempb.AddRequest), opts...)
		}
		return grpccli.Add(ctx, &itempb.AddRequest{}, opts...)
	}
}

// EncodeAddRequest encodes requests sent to item add endpoint.
func EncodeAddRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*item.Item)
	if !ok {
		return nil, goagrpc.ErrInvalidType("item", "add", "*item.Item", v)
	}
	return NewProtoAddRequest(payload), nil
}

// DecodeAddResponse decodes responses from the item add endpoint.
func DecodeAddResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	var view string
	{
		if vals := hdr.Get("goa-view"); len(vals) > 0 {
			view = vals[0]
		}
	}
	message, ok := v.(*itempb.AddResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("item", "add", "*itempb.AddResponse", v)
	}
	res := NewAddResult(message)
	vres := &itemviews.StoredItem{Projected: res, View: view}
	if err := itemviews.ValidateStoredItem(vres); err != nil {
		return nil, err
	}
	return item.NewStoredItem(vres), nil
}

// BuildUpdateFunc builds the remote method to invoke for "item" service
// "update" endpoint.
func BuildUpdateFunc(grpccli itempb.ItemClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Update(ctx, reqpb.(*itempb.UpdateRequest), opts...)
		}
		return grpccli.Update(ctx, &itempb.UpdateRequest{}, opts...)
	}
}

// EncodeUpdateRequest encodes requests sent to item update endpoint.
func EncodeUpdateRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*item.UpdatePayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("item", "update", "*item.UpdatePayload", v)
	}
	return NewProtoUpdateRequest(payload), nil
}

// DecodeUpdateResponse decodes responses from the item update endpoint.
func DecodeUpdateResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	var view string
	{
		if vals := hdr.Get("goa-view"); len(vals) > 0 {
			view = vals[0]
		}
	}
	message, ok := v.(*itempb.UpdateResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("item", "update", "*itempb.UpdateResponse", v)
	}
	res := NewUpdateResult(message)
	vres := &itemviews.StoredItem{Projected: res, View: view}
	if err := itemviews.ValidateStoredItem(vres); err != nil {
		return nil, err
	}
	return item.NewStoredItem(vres), nil
}

// BuildRemoveFunc builds the remote method to invoke for "item" service
// "remove" endpoint.
func BuildRemoveFunc(grpccli itempb.ItemClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Remove(ctx, reqpb.(*itempb.RemoveRequest), opts...)
		}
		return grpccli.Remove(ctx, &itempb.RemoveRequest{}, opts...)
	}
}

// EncodeRemoveRequest encodes requests sent to item remove endpoint.
func EncodeRemoveRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*item.RemovePayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("item", "remove", "*item.RemovePayload", v)
	}
	return NewProtoRemoveRequest(payload), nil
}
