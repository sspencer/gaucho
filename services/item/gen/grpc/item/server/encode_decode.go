// Code generated by goa v3.10.2, DO NOT EDIT.
//
// item gRPC server encoders and decoders
//
// Command:
// $ goa gen gaucho/services/item/design -o services/item

package server

import (
	"context"
	itempb "gaucho/services/item/gen/grpc/item/pb"
	item "gaucho/services/item/gen/item"
	itemviews "gaucho/services/item/gen/item/views"

	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc/metadata"
)

// EncodeGetResponse encodes responses from the "item" service "get" endpoint.
func EncodeGetResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	vres, ok := v.(*itemviews.StoredItem)
	if !ok {
		return nil, goagrpc.ErrInvalidType("item", "get", "*itemviews.StoredItem", v)
	}
	result := vres.Projected
	(*hdr).Append("goa-view", vres.View)
	resp := NewProtoGetResponse(result)
	return resp, nil
}

// DecodeGetRequest decodes requests sent to "item" service "get" endpoint.
func DecodeGetRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		message *itempb.GetRequest
		ok      bool
	)
	{
		if message, ok = v.(*itempb.GetRequest); !ok {
			return nil, goagrpc.ErrInvalidType("item", "get", "*itempb.GetRequest", v)
		}
	}
	var payload uint32
	{
		payload = NewGetPayload(message)
	}
	return payload, nil
}

// EncodeGetAllResponse encodes responses from the "item" service "get_all"
// endpoint.
func EncodeGetAllResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	result, ok := v.([]*item.StoredItem)
	if !ok {
		return nil, goagrpc.ErrInvalidType("item", "get_all", "[]*item.StoredItem", v)
	}
	resp := NewProtoGetAllResponse(result)
	return resp, nil
}

// EncodeAddResponse encodes responses from the "item" service "add" endpoint.
func EncodeAddResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	vres, ok := v.(*itemviews.StoredItem)
	if !ok {
		return nil, goagrpc.ErrInvalidType("item", "add", "*itemviews.StoredItem", v)
	}
	result := vres.Projected
	(*hdr).Append("goa-view", vres.View)
	resp := NewProtoAddResponse(result)
	return resp, nil
}

// DecodeAddRequest decodes requests sent to "item" service "add" endpoint.
func DecodeAddRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		message *itempb.AddRequest
		ok      bool
	)
	{
		if message, ok = v.(*itempb.AddRequest); !ok {
			return nil, goagrpc.ErrInvalidType("item", "add", "*itempb.AddRequest", v)
		}
		if err := ValidateAddRequest(message); err != nil {
			return nil, err
		}
	}
	var payload *item.Item
	{
		payload = NewAddPayload(message)
	}
	return payload, nil
}

// EncodeUpdateResponse encodes responses from the "item" service "update"
// endpoint.
func EncodeUpdateResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	vres, ok := v.(*itemviews.StoredItem)
	if !ok {
		return nil, goagrpc.ErrInvalidType("item", "update", "*itemviews.StoredItem", v)
	}
	result := vres.Projected
	(*hdr).Append("goa-view", vres.View)
	resp := NewProtoUpdateResponse(result)
	return resp, nil
}

// DecodeUpdateRequest decodes requests sent to "item" service "update"
// endpoint.
func DecodeUpdateRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		message *itempb.UpdateRequest
		ok      bool
	)
	{
		if message, ok = v.(*itempb.UpdateRequest); !ok {
			return nil, goagrpc.ErrInvalidType("item", "update", "*itempb.UpdateRequest", v)
		}
		if err := ValidateUpdateRequest(message); err != nil {
			return nil, err
		}
	}
	var payload *item.UpdatePayload
	{
		payload = NewUpdatePayload(message)
	}
	return payload, nil
}

// EncodeRemoveResponse encodes responses from the "item" service "remove"
// endpoint.
func EncodeRemoveResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	resp := NewProtoRemoveResponse()
	return resp, nil
}

// DecodeRemoveRequest decodes requests sent to "item" service "remove"
// endpoint.
func DecodeRemoveRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		message *itempb.RemoveRequest
		ok      bool
	)
	{
		if message, ok = v.(*itempb.RemoveRequest); !ok {
			return nil, goagrpc.ErrInvalidType("item", "remove", "*itempb.RemoveRequest", v)
		}
		if err := ValidateRemoveRequest(message); err != nil {
			return nil, err
		}
	}
	var payload *item.RemovePayload
	{
		payload = NewRemovePayload(message)
	}
	return payload, nil
}
