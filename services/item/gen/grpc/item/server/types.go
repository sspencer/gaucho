// Code generated by goa v3.10.2, DO NOT EDIT.
//
// item gRPC server types
//
// Command:
// $ goa gen gaucho/services/item/design -o services/item

package server

import (
	itempb "gaucho/services/item/gen/grpc/item/pb"
	item "gaucho/services/item/gen/item"
	itemviews "gaucho/services/item/gen/item/views"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// NewGetPayload builds the payload of the "get" endpoint of the "item" service
// from the gRPC request type.
func NewGetPayload(message *itempb.GetRequest) uint32 {
	v := message.Field
	return v
}

// NewProtoGetResponse builds the gRPC response type from the result of the
// "get" endpoint of the "item" service.
func NewProtoGetResponse(result *itemviews.StoredItemView) *itempb.GetResponse {
	message := &itempb.GetResponse{
		Id:          *result.ID,
		Name:        *result.Name,
		Description: result.Description,
		Damage:      int32(*result.Damage),
		Healing:     int32(*result.Healing),
		Protection:  int32(*result.Protection),
	}
	return message
}

// NewProtoGetAllResponse builds the gRPC response type from the result of the
// "get_all" endpoint of the "item" service.
func NewProtoGetAllResponse(result []*item.StoredItem) *itempb.GetAllResponse {
	message := &itempb.GetAllResponse{}
	message.Field = make([]*itempb.StoredItem, len(result))
	for i, val := range result {
		message.Field[i] = &itempb.StoredItem{
			Id:          val.ID,
			Name:        val.Name,
			Description: val.Description,
			Damage:      int32(val.Damage),
			Healing:     int32(val.Healing),
			Protection:  int32(val.Protection),
		}
	}
	return message
}

// NewAddPayload builds the payload of the "add" endpoint of the "item" service
// from the gRPC request type.
func NewAddPayload(message *itempb.AddRequest) *item.Item {
	v := &item.Item{
		Name:        message.Name,
		Description: message.Description,
		Damage:      int(message.Damage),
		Healing:     int(message.Healing),
		Protection:  int(message.Protection),
	}
	return v
}

// NewProtoAddResponse builds the gRPC response type from the result of the
// "add" endpoint of the "item" service.
func NewProtoAddResponse(result *itemviews.StoredItemView) *itempb.AddResponse {
	message := &itempb.AddResponse{
		Id:          *result.ID,
		Name:        *result.Name,
		Description: result.Description,
		Damage:      int32(*result.Damage),
		Healing:     int32(*result.Healing),
		Protection:  int32(*result.Protection),
	}
	return message
}

// NewUpdatePayload builds the payload of the "update" endpoint of the "item"
// service from the gRPC request type.
func NewUpdatePayload(message *itempb.UpdateRequest) *item.UpdatePayload {
	v := &item.UpdatePayload{
		ID: message.Id,
	}
	if message.Item != nil {
		v.Item = protobufItempbItem2ToItemItem(message.Item)
	}
	return v
}

// NewProtoUpdateResponse builds the gRPC response type from the result of the
// "update" endpoint of the "item" service.
func NewProtoUpdateResponse(result *itemviews.StoredItemView) *itempb.UpdateResponse {
	message := &itempb.UpdateResponse{
		Id:          *result.ID,
		Name:        *result.Name,
		Description: result.Description,
		Damage:      int32(*result.Damage),
		Healing:     int32(*result.Healing),
		Protection:  int32(*result.Protection),
	}
	return message
}

// NewRemovePayload builds the payload of the "remove" endpoint of the "item"
// service from the gRPC request type.
func NewRemovePayload(message *itempb.RemoveRequest) *item.RemovePayload {
	v := &item.RemovePayload{
		ID: message.Id,
	}
	return v
}

// NewProtoRemoveResponse builds the gRPC response type from the result of the
// "remove" endpoint of the "item" service.
func NewProtoRemoveResponse() *itempb.RemoveResponse {
	message := &itempb.RemoveResponse{}
	return message
}

// ValidateAddRequest runs the validations defined on AddRequest.
func ValidateAddRequest(message *itempb.AddRequest) (err error) {
	if utf8.RuneCountInString(message.Name) < 2 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("message.name", message.Name, utf8.RuneCountInString(message.Name), 2, true))
	}
	if utf8.RuneCountInString(message.Name) > 50 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("message.name", message.Name, utf8.RuneCountInString(message.Name), 50, false))
	}
	if message.Damage < 0 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("message.damage", message.Damage, 0, true))
	}
	if message.Damage > 25 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("message.damage", message.Damage, 25, false))
	}
	if message.Healing < 0 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("message.healing", message.Healing, 0, true))
	}
	if message.Healing > 50 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("message.healing", message.Healing, 50, false))
	}
	if message.Protection < 0 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("message.protection", message.Protection, 0, true))
	}
	if message.Protection > 20 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("message.protection", message.Protection, 20, false))
	}
	return
}

// ValidateUpdateRequest runs the validations defined on UpdateRequest.
func ValidateUpdateRequest(message *itempb.UpdateRequest) (err error) {
	if message.Item == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("item", "message"))
	}
	if message.Id < 1 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("message.id", message.Id, 1, true))
	}
	if message.Item != nil {
		if err2 := ValidateItem2(message.Item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateItem2 runs the validations defined on Item2.
func ValidateItem2(item *itempb.Item2) (err error) {
	if utf8.RuneCountInString(item.Name) < 2 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("item.name", item.Name, utf8.RuneCountInString(item.Name), 2, true))
	}
	if utf8.RuneCountInString(item.Name) > 50 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("item.name", item.Name, utf8.RuneCountInString(item.Name), 50, false))
	}
	if item.Damage < 0 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("item.damage", item.Damage, 0, true))
	}
	if item.Damage > 25 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("item.damage", item.Damage, 25, false))
	}
	if item.Healing < 0 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("item.healing", item.Healing, 0, true))
	}
	if item.Healing > 50 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("item.healing", item.Healing, 50, false))
	}
	if item.Protection < 0 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("item.protection", item.Protection, 0, true))
	}
	if item.Protection > 20 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("item.protection", item.Protection, 20, false))
	}
	return
}

// ValidateRemoveRequest runs the validations defined on RemoveRequest.
func ValidateRemoveRequest(message *itempb.RemoveRequest) (err error) {
	if message.Id < 1 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("message.id", message.Id, 1, true))
	}
	return
}

// protobufItempbItem2ToItemItem builds a value of type *item.Item from a value
// of type *itempb.Item2.
func protobufItempbItem2ToItemItem(v *itempb.Item2) *item.Item {
	res := &item.Item{
		Name:        v.Name,
		Description: v.Description,
		Damage:      int(v.Damage),
		Healing:     int(v.Healing),
		Protection:  int(v.Protection),
	}

	return res
}

// svcItemItemToItempbItem2 builds a value of type *itempb.Item2 from a value
// of type *item.Item.
func svcItemItemToItempbItem2(v *item.Item) *itempb.Item2 {
	res := &itempb.Item2{
		Name:        v.Name,
		Description: v.Description,
		Damage:      int32(v.Damage),
		Healing:     int32(v.Healing),
		Protection:  int32(v.Protection),
	}

	return res
}
