// Code generated by goa v3.10.2, DO NOT EDIT.
//
// item endpoints
//
// Command:
// $ goa gen gaucho/services/item/design -o services/item

package item

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "item" service endpoints.
type Endpoints struct {
	Get    goa.Endpoint
	GetAll goa.Endpoint
	Add    goa.Endpoint
	Update goa.Endpoint
	Remove goa.Endpoint
}

// NewEndpoints wraps the methods of the "item" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		Get:    NewGetEndpoint(s),
		GetAll: NewGetAllEndpoint(s),
		Add:    NewAddEndpoint(s),
		Update: NewUpdateEndpoint(s),
		Remove: NewRemoveEndpoint(s),
	}
}

// Use applies the given middleware to all the "item" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Get = m(e.Get)
	e.GetAll = m(e.GetAll)
	e.Add = m(e.Add)
	e.Update = m(e.Update)
	e.Remove = m(e.Remove)
}

// NewGetEndpoint returns an endpoint function that calls the method "get" of
// service "item".
func NewGetEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(uint32)
		res, err := s.Get(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedStoredItem(res, "default")
		return vres, nil
	}
}

// NewGetAllEndpoint returns an endpoint function that calls the method
// "get_all" of service "item".
func NewGetAllEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetAll(ctx)
	}
}

// NewAddEndpoint returns an endpoint function that calls the method "add" of
// service "item".
func NewAddEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*Item)
		res, err := s.Add(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedStoredItem(res, "default")
		return vres, nil
	}
}

// NewUpdateEndpoint returns an endpoint function that calls the method
// "update" of service "item".
func NewUpdateEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*UpdatePayload)
		res, err := s.Update(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedStoredItem(res, "default")
		return vres, nil
	}
}

// NewRemoveEndpoint returns an endpoint function that calls the method
// "remove" of service "item".
func NewRemoveEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*RemovePayload)
		return nil, s.Remove(ctx, p)
	}
}
