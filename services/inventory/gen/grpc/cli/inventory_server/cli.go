// Code generated by goa v3.10.2, DO NOT EDIT.
//
// InventoryServer gRPC client CLI support package
//
// Command:
// $ goa gen gaucho/services/inventory/design -o services/inventory

package cli

import (
	"flag"
	"fmt"
	inventoryc "gaucho/services/inventory/gen/grpc/inventory/client"
	"os"

	goa "goa.design/goa/v3/pkg"
	grpc "google.golang.org/grpc"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `inventory (get|add|remove)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` inventory get --message '{
      "field": 994971105
   }'` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(cc *grpc.ClientConn, opts ...grpc.CallOption) (goa.Endpoint, interface{}, error) {
	var (
		inventoryFlags = flag.NewFlagSet("inventory", flag.ContinueOnError)

		inventoryGetFlags       = flag.NewFlagSet("get", flag.ExitOnError)
		inventoryGetMessageFlag = inventoryGetFlags.String("message", "", "")

		inventoryAddFlags       = flag.NewFlagSet("add", flag.ExitOnError)
		inventoryAddMessageFlag = inventoryAddFlags.String("message", "", "")

		inventoryRemoveFlags       = flag.NewFlagSet("remove", flag.ExitOnError)
		inventoryRemoveMessageFlag = inventoryRemoveFlags.String("message", "", "")
	)
	inventoryFlags.Usage = inventoryUsage
	inventoryGetFlags.Usage = inventoryGetUsage
	inventoryAddFlags.Usage = inventoryAddUsage
	inventoryRemoveFlags.Usage = inventoryRemoveUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "inventory":
			svcf = inventoryFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "inventory":
			switch epn {
			case "get":
				epf = inventoryGetFlags

			case "add":
				epf = inventoryAddFlags

			case "remove":
				epf = inventoryRemoveFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "inventory":
			c := inventoryc.NewClient(cc, opts...)
			switch epn {
			case "get":
				endpoint = c.Get()
				data, err = inventoryc.BuildGetPayload(*inventoryGetMessageFlag)
			case "add":
				endpoint = c.Add()
				data, err = inventoryc.BuildAddPayload(*inventoryAddMessageFlag)
			case "remove":
				endpoint = c.Remove()
				data, err = inventoryc.BuildRemovePayload(*inventoryRemoveMessageFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// inventoryUsage displays the usage of the inventory command and its
// subcommands.
func inventoryUsage() {
	fmt.Fprintf(os.Stderr, `Service that provides character API
Usage:
    %[1]s [globalflags] inventory COMMAND [flags]

COMMAND:
    get: Retrieve all inventory items for the given character
    add: Add inventory item to the given character
    remove: Remove inventory item from the given character

Additional help:
    %[1]s inventory COMMAND --help
`, os.Args[0])
}
func inventoryGetUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] inventory get -message JSON

Retrieve all inventory items for the given character
    -message JSON: 

Example:
    %[1]s inventory get --message '{
      "field": 994971105
   }'
`, os.Args[0])
}

func inventoryAddUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] inventory add -message JSON

Add inventory item to the given character
    -message JSON: 

Example:
    %[1]s inventory add --message '{
      "character_id": 2143031474,
      "item_id": 1739942988
   }'
`, os.Args[0])
}

func inventoryRemoveUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] inventory remove -message JSON

Remove inventory item from the given character
    -message JSON: 

Example:
    %[1]s inventory remove --message '{
      "character_id": 186076311,
      "item_id": 3860548978
   }'
`, os.Args[0])
}
