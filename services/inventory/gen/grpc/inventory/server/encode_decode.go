// Code generated by goa v3.10.2, DO NOT EDIT.
//
// inventory gRPC server encoders and decoders
//
// Command:
// $ goa gen gaucho/services/inventory/design -o services/inventory

package server

import (
	"context"
	inventorypb "gaucho/services/inventory/gen/grpc/inventory/pb"
	inventory "gaucho/services/inventory/gen/inventory"

	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc/metadata"
)

// EncodeGetResponse encodes responses from the "inventory" service "get"
// endpoint.
func EncodeGetResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	result, ok := v.([]uint32)
	if !ok {
		return nil, goagrpc.ErrInvalidType("inventory", "get", "[]uint32", v)
	}
	resp := NewProtoGetResponse(result)
	return resp, nil
}

// DecodeGetRequest decodes requests sent to "inventory" service "get" endpoint.
func DecodeGetRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		message *inventorypb.GetRequest
		ok      bool
	)
	{
		if message, ok = v.(*inventorypb.GetRequest); !ok {
			return nil, goagrpc.ErrInvalidType("inventory", "get", "*inventorypb.GetRequest", v)
		}
	}
	var payload uint32
	{
		payload = NewGetPayload(message)
	}
	return payload, nil
}

// EncodeAddResponse encodes responses from the "inventory" service "add"
// endpoint.
func EncodeAddResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	result, ok := v.([]uint32)
	if !ok {
		return nil, goagrpc.ErrInvalidType("inventory", "add", "[]uint32", v)
	}
	resp := NewProtoAddResponse(result)
	return resp, nil
}

// DecodeAddRequest decodes requests sent to "inventory" service "add" endpoint.
func DecodeAddRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		message *inventorypb.AddRequest
		ok      bool
	)
	{
		if message, ok = v.(*inventorypb.AddRequest); !ok {
			return nil, goagrpc.ErrInvalidType("inventory", "add", "*inventorypb.AddRequest", v)
		}
		if err := ValidateAddRequest(message); err != nil {
			return nil, err
		}
	}
	var payload *inventory.AddPayload
	{
		payload = NewAddPayload(message)
	}
	return payload, nil
}

// EncodeRemoveResponse encodes responses from the "inventory" service "remove"
// endpoint.
func EncodeRemoveResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	resp := NewProtoRemoveResponse()
	return resp, nil
}

// DecodeRemoveRequest decodes requests sent to "inventory" service "remove"
// endpoint.
func DecodeRemoveRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		message *inventorypb.RemoveRequest
		ok      bool
	)
	{
		if message, ok = v.(*inventorypb.RemoveRequest); !ok {
			return nil, goagrpc.ErrInvalidType("inventory", "remove", "*inventorypb.RemoveRequest", v)
		}
		if err := ValidateRemoveRequest(message); err != nil {
			return nil, err
		}
	}
	var payload *inventory.RemovePayload
	{
		payload = NewRemovePayload(message)
	}
	return payload, nil
}
