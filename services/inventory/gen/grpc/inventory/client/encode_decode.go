// Code generated by goa v3.10.2, DO NOT EDIT.
//
// inventory gRPC client encoders and decoders
//
// Command:
// $ goa gen gaucho/services/inventory/design -o services/inventory

package client

import (
	"context"
	inventorypb "gaucho/services/inventory/gen/grpc/inventory/pb"
	inventory "gaucho/services/inventory/gen/inventory"

	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

// BuildGetFunc builds the remote method to invoke for "inventory" service
// "get" endpoint.
func BuildGetFunc(grpccli inventorypb.InventoryClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Get(ctx, reqpb.(*inventorypb.GetRequest), opts...)
		}
		return grpccli.Get(ctx, &inventorypb.GetRequest{}, opts...)
	}
}

// EncodeGetRequest encodes requests sent to inventory get endpoint.
func EncodeGetRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(uint32)
	if !ok {
		return nil, goagrpc.ErrInvalidType("inventory", "get", "uint32", v)
	}
	return NewProtoGetRequest(payload), nil
}

// DecodeGetResponse decodes responses from the inventory get endpoint.
func DecodeGetResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	message, ok := v.(*inventorypb.GetResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("inventory", "get", "*inventorypb.GetResponse", v)
	}
	res := NewGetResult(message)
	return res, nil
}

// BuildAddFunc builds the remote method to invoke for "inventory" service
// "add" endpoint.
func BuildAddFunc(grpccli inventorypb.InventoryClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Add(ctx, reqpb.(*inventorypb.AddRequest), opts...)
		}
		return grpccli.Add(ctx, &inventorypb.AddRequest{}, opts...)
	}
}

// EncodeAddRequest encodes requests sent to inventory add endpoint.
func EncodeAddRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*inventory.AddPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("inventory", "add", "*inventory.AddPayload", v)
	}
	return NewProtoAddRequest(payload), nil
}

// DecodeAddResponse decodes responses from the inventory add endpoint.
func DecodeAddResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	message, ok := v.(*inventorypb.AddResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("inventory", "add", "*inventorypb.AddResponse", v)
	}
	res := NewAddResult(message)
	return res, nil
}

// BuildRemoveFunc builds the remote method to invoke for "inventory" service
// "remove" endpoint.
func BuildRemoveFunc(grpccli inventorypb.InventoryClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Remove(ctx, reqpb.(*inventorypb.RemoveRequest), opts...)
		}
		return grpccli.Remove(ctx, &inventorypb.RemoveRequest{}, opts...)
	}
}

// EncodeRemoveRequest encodes requests sent to inventory remove endpoint.
func EncodeRemoveRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*inventory.RemovePayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("inventory", "remove", "*inventory.RemovePayload", v)
	}
	return NewProtoRemoveRequest(payload), nil
}
