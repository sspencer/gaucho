// Code generated by goa v3.10.2, DO NOT EDIT.
//
// CharacterServer gRPC client CLI support package
//
// Command:
// $ goa gen gaucho/services/character/design -o services/character

package cli

import (
	"flag"
	"fmt"
	characterc "gaucho/services/character/gen/grpc/character/client"
	"os"

	goa "goa.design/goa/v3/pkg"
	grpc "google.golang.org/grpc"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `character (get|get-all|add|update|remove)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` character get --message '{
      "field": 2931724321
   }'` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(cc *grpc.ClientConn, opts ...grpc.CallOption) (goa.Endpoint, interface{}, error) {
	var (
		characterFlags = flag.NewFlagSet("character", flag.ContinueOnError)

		characterGetFlags       = flag.NewFlagSet("get", flag.ExitOnError)
		characterGetMessageFlag = characterGetFlags.String("message", "", "")

		characterGetAllFlags = flag.NewFlagSet("get-all", flag.ExitOnError)

		characterAddFlags       = flag.NewFlagSet("add", flag.ExitOnError)
		characterAddMessageFlag = characterAddFlags.String("message", "", "")

		characterUpdateFlags       = flag.NewFlagSet("update", flag.ExitOnError)
		characterUpdateMessageFlag = characterUpdateFlags.String("message", "", "")

		characterRemoveFlags       = flag.NewFlagSet("remove", flag.ExitOnError)
		characterRemoveMessageFlag = characterRemoveFlags.String("message", "", "")
	)
	characterFlags.Usage = characterUsage
	characterGetFlags.Usage = characterGetUsage
	characterGetAllFlags.Usage = characterGetAllUsage
	characterAddFlags.Usage = characterAddUsage
	characterUpdateFlags.Usage = characterUpdateUsage
	characterRemoveFlags.Usage = characterRemoveUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "character":
			svcf = characterFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "character":
			switch epn {
			case "get":
				epf = characterGetFlags

			case "get-all":
				epf = characterGetAllFlags

			case "add":
				epf = characterAddFlags

			case "update":
				epf = characterUpdateFlags

			case "remove":
				epf = characterRemoveFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "character":
			c := characterc.NewClient(cc, opts...)
			switch epn {
			case "get":
				endpoint = c.Get()
				data, err = characterc.BuildGetPayload(*characterGetMessageFlag)
			case "get-all":
				endpoint = c.GetAll()
				data = nil
			case "add":
				endpoint = c.Add()
				data, err = characterc.BuildAddPayload(*characterAddMessageFlag)
			case "update":
				endpoint = c.Update()
				data, err = characterc.BuildUpdatePayload(*characterUpdateMessageFlag)
			case "remove":
				endpoint = c.Remove()
				data, err = characterc.BuildRemovePayload(*characterRemoveMessageFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// characterUsage displays the usage of the character command and its
// subcommands.
func characterUsage() {
	fmt.Fprintf(os.Stderr, `Service that provides character API
Usage:
    %[1]s [globalflags] character COMMAND [flags]

COMMAND:
    get: Retrieve character by the given id
    get-all: Retrieve all characters
    add: Create a character
    update: Update a character
    remove: Remove character

Additional help:
    %[1]s character COMMAND --help
`, os.Args[0])
}
func characterGetUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] character get -message JSON

Retrieve character by the given id
    -message JSON: 

Example:
    %[1]s character get --message '{
      "field": 2931724321
   }'
`, os.Args[0])
}

func characterGetAllUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] character get-all

Retrieve all characters

Example:
    %[1]s character get-all
`, os.Args[0])
}

func characterAddUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] character add -message JSON

Create a character
    -message JSON: 

Example:
    %[1]s character add --message '{
      "description": "Quo odit rerum et.",
      "experience": 56,
      "health": 12,
      "name": "tvt"
   }'
`, os.Args[0])
}

func characterUpdateUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] character update -message JSON

Update a character
    -message JSON: 

Example:
    %[1]s character update --message '{
      "character": {
         "description": "Ab enim dolorem quod iste.",
         "experience": 42,
         "health": 99,
         "name": "r1t"
      },
      "id": 3972646431
   }'
`, os.Args[0])
}

func characterRemoveUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] character remove -message JSON

Remove character
    -message JSON: 

Example:
    %[1]s character remove --message '{
      "id": 3796969755
   }'
`, os.Args[0])
}
