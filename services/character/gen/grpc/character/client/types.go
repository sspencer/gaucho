// Code generated by goa v3.10.2, DO NOT EDIT.
//
// character gRPC client types
//
// Command:
// $ goa gen gaucho/services/character/design -o services/character

package client

import (
	character "gaucho/services/character/gen/character"
	characterviews "gaucho/services/character/gen/character/views"
	characterpb "gaucho/services/character/gen/grpc/character/pb"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// NewProtoGetRequest builds the gRPC request type from the payload of the
// "get" endpoint of the "character" service.
func NewProtoGetRequest(payload uint32) *characterpb.GetRequest {
	message := &characterpb.GetRequest{}
	message.Field = payload
	return message
}

// NewGetResult builds the result type of the "get" endpoint of the "character"
// service from the gRPC response type.
func NewGetResult(message *characterpb.GetResponse) *characterviews.StoredCharacterView {
	result := &characterviews.StoredCharacterView{
		ID:          &message.Id,
		Name:        &message.Name,
		Description: &message.Description,
	}
	experience := int(message.Experience)
	result.Experience = &experience
	health := int(message.Health)
	result.Health = &health
	return result
}

// NewProtoGetAllRequest builds the gRPC request type from the payload of the
// "get_all" endpoint of the "character" service.
func NewProtoGetAllRequest() *characterpb.GetAllRequest {
	message := &characterpb.GetAllRequest{}
	return message
}

// NewGetAllResult builds the result type of the "get_all" endpoint of the
// "character" service from the gRPC response type.
func NewGetAllResult(message *characterpb.GetAllResponse) []*character.StoredCharacter {
	result := make([]*character.StoredCharacter, len(message.Field))
	for i, val := range message.Field {
		result[i] = &character.StoredCharacter{
			ID:          val.Id,
			Name:        val.Name,
			Description: val.Description,
			Experience:  int(val.Experience),
			Health:      int(val.Health),
		}
	}
	return result
}

// NewProtoAddRequest builds the gRPC request type from the payload of the
// "add" endpoint of the "character" service.
func NewProtoAddRequest(payload *character.Character) *characterpb.AddRequest {
	message := &characterpb.AddRequest{
		Name:        payload.Name,
		Description: payload.Description,
		Health:      int32(payload.Health),
		Experience:  int32(payload.Experience),
	}
	return message
}

// NewAddResult builds the result type of the "add" endpoint of the "character"
// service from the gRPC response type.
func NewAddResult(message *characterpb.AddResponse) *characterviews.StoredCharacterView {
	result := &characterviews.StoredCharacterView{
		ID:          &message.Id,
		Name:        &message.Name,
		Description: &message.Description,
	}
	experience := int(message.Experience)
	result.Experience = &experience
	health := int(message.Health)
	result.Health = &health
	return result
}

// NewProtoUpdateRequest builds the gRPC request type from the payload of the
// "update" endpoint of the "character" service.
func NewProtoUpdateRequest(payload *character.UpdatePayload) *characterpb.UpdateRequest {
	message := &characterpb.UpdateRequest{
		Id: payload.ID,
	}
	if payload.Character != nil {
		message.Character = svcCharacterCharacterToCharacterpbCharacter2(payload.Character)
	}
	return message
}

// NewUpdateResult builds the result type of the "update" endpoint of the
// "character" service from the gRPC response type.
func NewUpdateResult(message *characterpb.UpdateResponse) *characterviews.StoredCharacterView {
	result := &characterviews.StoredCharacterView{
		ID:          &message.Id,
		Name:        &message.Name,
		Description: &message.Description,
	}
	experience := int(message.Experience)
	result.Experience = &experience
	health := int(message.Health)
	result.Health = &health
	return result
}

// NewProtoRemoveRequest builds the gRPC request type from the payload of the
// "remove" endpoint of the "character" service.
func NewProtoRemoveRequest(payload *character.RemovePayload) *characterpb.RemoveRequest {
	message := &characterpb.RemoveRequest{
		Id: payload.ID,
	}
	return message
}

// ValidateGetResponse runs the validations defined on GetResponse.
func ValidateGetResponse(message *characterpb.GetResponse) (err error) {
	if utf8.RuneCountInString(message.Name) < 2 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("message.name", message.Name, utf8.RuneCountInString(message.Name), 2, true))
	}
	if utf8.RuneCountInString(message.Name) > 50 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("message.name", message.Name, utf8.RuneCountInString(message.Name), 50, false))
	}
	if message.Experience < 1 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("message.experience", message.Experience, 1, true))
	}
	if message.Experience > 100 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("message.experience", message.Experience, 100, false))
	}
	if message.Health < 0 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("message.health", message.Health, 0, true))
	}
	if message.Health > 100 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("message.health", message.Health, 100, false))
	}
	return
}

// ValidateGetAllResponse runs the validations defined on GetAllResponse.
func ValidateGetAllResponse(message *characterpb.GetAllResponse) (err error) {
	for _, e := range message.Field {
		if e != nil {
			if err2 := ValidateStoredCharacter(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateStoredCharacter runs the validations defined on StoredCharacter.
func ValidateStoredCharacter(elem *characterpb.StoredCharacter) (err error) {
	if utf8.RuneCountInString(elem.Name) < 2 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("elem.name", elem.Name, utf8.RuneCountInString(elem.Name), 2, true))
	}
	if utf8.RuneCountInString(elem.Name) > 50 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("elem.name", elem.Name, utf8.RuneCountInString(elem.Name), 50, false))
	}
	if elem.Experience < 1 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("elem.experience", elem.Experience, 1, true))
	}
	if elem.Experience > 100 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("elem.experience", elem.Experience, 100, false))
	}
	if elem.Health < 0 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("elem.health", elem.Health, 0, true))
	}
	if elem.Health > 100 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("elem.health", elem.Health, 100, false))
	}
	return
}

// ValidateAddResponse runs the validations defined on AddResponse.
func ValidateAddResponse(message *characterpb.AddResponse) (err error) {
	if utf8.RuneCountInString(message.Name) < 2 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("message.name", message.Name, utf8.RuneCountInString(message.Name), 2, true))
	}
	if utf8.RuneCountInString(message.Name) > 50 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("message.name", message.Name, utf8.RuneCountInString(message.Name), 50, false))
	}
	if message.Experience < 1 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("message.experience", message.Experience, 1, true))
	}
	if message.Experience > 100 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("message.experience", message.Experience, 100, false))
	}
	if message.Health < 0 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("message.health", message.Health, 0, true))
	}
	if message.Health > 100 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("message.health", message.Health, 100, false))
	}
	return
}

// ValidateUpdateResponse runs the validations defined on UpdateResponse.
func ValidateUpdateResponse(message *characterpb.UpdateResponse) (err error) {
	if utf8.RuneCountInString(message.Name) < 2 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("message.name", message.Name, utf8.RuneCountInString(message.Name), 2, true))
	}
	if utf8.RuneCountInString(message.Name) > 50 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("message.name", message.Name, utf8.RuneCountInString(message.Name), 50, false))
	}
	if message.Experience < 1 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("message.experience", message.Experience, 1, true))
	}
	if message.Experience > 100 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("message.experience", message.Experience, 100, false))
	}
	if message.Health < 0 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("message.health", message.Health, 0, true))
	}
	if message.Health > 100 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("message.health", message.Health, 100, false))
	}
	return
}

// protobufCharacterpbCharacter2ToCharacterCharacter builds a value of type
// *character.Character from a value of type *characterpb.Character2.
func protobufCharacterpbCharacter2ToCharacterCharacter(v *characterpb.Character2) *character.Character {
	res := &character.Character{
		Name:        v.Name,
		Description: v.Description,
		Health:      int(v.Health),
		Experience:  int(v.Experience),
	}

	return res
}

// svcCharacterCharacterToCharacterpbCharacter2 builds a value of type
// *characterpb.Character2 from a value of type *character.Character.
func svcCharacterCharacterToCharacterpbCharacter2(v *character.Character) *characterpb.Character2 {
	res := &characterpb.Character2{
		Name:        v.Name,
		Description: v.Description,
		Health:      int32(v.Health),
		Experience:  int32(v.Experience),
	}

	return res
}
