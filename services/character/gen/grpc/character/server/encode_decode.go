// Code generated by goa v3.10.2, DO NOT EDIT.
//
// character gRPC server encoders and decoders
//
// Command:
// $ goa gen gaucho/services/character/design -o services/character

package server

import (
	"context"
	character "gaucho/services/character/gen/character"
	characterviews "gaucho/services/character/gen/character/views"
	characterpb "gaucho/services/character/gen/grpc/character/pb"

	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc/metadata"
)

// EncodeGetResponse encodes responses from the "character" service "get"
// endpoint.
func EncodeGetResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	vres, ok := v.(*characterviews.StoredCharacter)
	if !ok {
		return nil, goagrpc.ErrInvalidType("character", "get", "*characterviews.StoredCharacter", v)
	}
	result := vres.Projected
	(*hdr).Append("goa-view", vres.View)
	resp := NewProtoGetResponse(result)
	return resp, nil
}

// DecodeGetRequest decodes requests sent to "character" service "get" endpoint.
func DecodeGetRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		message *characterpb.GetRequest
		ok      bool
	)
	{
		if message, ok = v.(*characterpb.GetRequest); !ok {
			return nil, goagrpc.ErrInvalidType("character", "get", "*characterpb.GetRequest", v)
		}
	}
	var payload uint32
	{
		payload = NewGetPayload(message)
	}
	return payload, nil
}

// EncodeGetAllResponse encodes responses from the "character" service
// "get_all" endpoint.
func EncodeGetAllResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	result, ok := v.([]*character.StoredCharacter)
	if !ok {
		return nil, goagrpc.ErrInvalidType("character", "get_all", "[]*character.StoredCharacter", v)
	}
	resp := NewProtoGetAllResponse(result)
	return resp, nil
}

// EncodeAddResponse encodes responses from the "character" service "add"
// endpoint.
func EncodeAddResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	vres, ok := v.(*characterviews.StoredCharacter)
	if !ok {
		return nil, goagrpc.ErrInvalidType("character", "add", "*characterviews.StoredCharacter", v)
	}
	result := vres.Projected
	(*hdr).Append("goa-view", vres.View)
	resp := NewProtoAddResponse(result)
	return resp, nil
}

// DecodeAddRequest decodes requests sent to "character" service "add" endpoint.
func DecodeAddRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		message *characterpb.AddRequest
		ok      bool
	)
	{
		if message, ok = v.(*characterpb.AddRequest); !ok {
			return nil, goagrpc.ErrInvalidType("character", "add", "*characterpb.AddRequest", v)
		}
		if err := ValidateAddRequest(message); err != nil {
			return nil, err
		}
	}
	var payload *character.Character
	{
		payload = NewAddPayload(message)
	}
	return payload, nil
}

// EncodeUpdateResponse encodes responses from the "character" service "update"
// endpoint.
func EncodeUpdateResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	vres, ok := v.(*characterviews.StoredCharacter)
	if !ok {
		return nil, goagrpc.ErrInvalidType("character", "update", "*characterviews.StoredCharacter", v)
	}
	result := vres.Projected
	(*hdr).Append("goa-view", vres.View)
	resp := NewProtoUpdateResponse(result)
	return resp, nil
}

// DecodeUpdateRequest decodes requests sent to "character" service "update"
// endpoint.
func DecodeUpdateRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		message *characterpb.UpdateRequest
		ok      bool
	)
	{
		if message, ok = v.(*characterpb.UpdateRequest); !ok {
			return nil, goagrpc.ErrInvalidType("character", "update", "*characterpb.UpdateRequest", v)
		}
		if err := ValidateUpdateRequest(message); err != nil {
			return nil, err
		}
	}
	var payload *character.UpdatePayload
	{
		payload = NewUpdatePayload(message)
	}
	return payload, nil
}

// EncodeRemoveResponse encodes responses from the "character" service "remove"
// endpoint.
func EncodeRemoveResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	resp := NewProtoRemoveResponse()
	return resp, nil
}

// DecodeRemoveRequest decodes requests sent to "character" service "remove"
// endpoint.
func DecodeRemoveRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		message *characterpb.RemoveRequest
		ok      bool
	)
	{
		if message, ok = v.(*characterpb.RemoveRequest); !ok {
			return nil, goagrpc.ErrInvalidType("character", "remove", "*characterpb.RemoveRequest", v)
		}
		if err := ValidateRemoveRequest(message); err != nil {
			return nil, err
		}
	}
	var payload *character.RemovePayload
	{
		payload = NewRemovePayload(message)
	}
	return payload, nil
}
