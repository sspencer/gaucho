// Code generated by goa v3.10.2, DO NOT EDIT.
//
// character gRPC server types
//
// Command:
// $ goa gen gaucho/services/character/design -o services/character

package server

import (
	character "gaucho/services/character/gen/character"
	characterviews "gaucho/services/character/gen/character/views"
	characterpb "gaucho/services/character/gen/grpc/character/pb"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// NewGetPayload builds the payload of the "get" endpoint of the "character"
// service from the gRPC request type.
func NewGetPayload(message *characterpb.GetRequest) uint32 {
	v := message.Field
	return v
}

// NewProtoGetResponse builds the gRPC response type from the result of the
// "get" endpoint of the "character" service.
func NewProtoGetResponse(result *characterviews.StoredCharacterView) *characterpb.GetResponse {
	message := &characterpb.GetResponse{
		Id:          *result.ID,
		Name:        *result.Name,
		Description: *result.Description,
		Experience:  int32(*result.Experience),
		Health:      int32(*result.Health),
	}
	return message
}

// NewProtoGetAllResponse builds the gRPC response type from the result of the
// "get_all" endpoint of the "character" service.
func NewProtoGetAllResponse(result []*character.StoredCharacter) *characterpb.GetAllResponse {
	message := &characterpb.GetAllResponse{}
	message.Field = make([]*characterpb.StoredCharacter, len(result))
	for i, val := range result {
		message.Field[i] = &characterpb.StoredCharacter{
			Id:          val.ID,
			Name:        val.Name,
			Description: val.Description,
			Experience:  int32(val.Experience),
			Health:      int32(val.Health),
		}
	}
	return message
}

// NewAddPayload builds the payload of the "add" endpoint of the "character"
// service from the gRPC request type.
func NewAddPayload(message *characterpb.AddRequest) *character.Character {
	v := &character.Character{
		Name:        message.Name,
		Description: message.Description,
		Health:      int(message.Health),
		Experience:  int(message.Experience),
	}
	return v
}

// NewProtoAddResponse builds the gRPC response type from the result of the
// "add" endpoint of the "character" service.
func NewProtoAddResponse(result *characterviews.StoredCharacterView) *characterpb.AddResponse {
	message := &characterpb.AddResponse{
		Id:          *result.ID,
		Name:        *result.Name,
		Description: *result.Description,
		Experience:  int32(*result.Experience),
		Health:      int32(*result.Health),
	}
	return message
}

// NewUpdatePayload builds the payload of the "update" endpoint of the
// "character" service from the gRPC request type.
func NewUpdatePayload(message *characterpb.UpdateRequest) *character.UpdatePayload {
	v := &character.UpdatePayload{
		ID: message.Id,
	}
	if message.Character != nil {
		v.Character = protobufCharacterpbCharacter2ToCharacterCharacter(message.Character)
	}
	return v
}

// NewProtoUpdateResponse builds the gRPC response type from the result of the
// "update" endpoint of the "character" service.
func NewProtoUpdateResponse(result *characterviews.StoredCharacterView) *characterpb.UpdateResponse {
	message := &characterpb.UpdateResponse{
		Id:          *result.ID,
		Name:        *result.Name,
		Description: *result.Description,
		Experience:  int32(*result.Experience),
		Health:      int32(*result.Health),
	}
	return message
}

// NewRemovePayload builds the payload of the "remove" endpoint of the
// "character" service from the gRPC request type.
func NewRemovePayload(message *characterpb.RemoveRequest) *character.RemovePayload {
	v := &character.RemovePayload{
		ID: message.Id,
	}
	return v
}

// NewProtoRemoveResponse builds the gRPC response type from the result of the
// "remove" endpoint of the "character" service.
func NewProtoRemoveResponse() *characterpb.RemoveResponse {
	message := &characterpb.RemoveResponse{}
	return message
}

// ValidateAddRequest runs the validations defined on AddRequest.
func ValidateAddRequest(message *characterpb.AddRequest) (err error) {
	if utf8.RuneCountInString(message.Name) < 2 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("message.name", message.Name, utf8.RuneCountInString(message.Name), 2, true))
	}
	if utf8.RuneCountInString(message.Name) > 50 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("message.name", message.Name, utf8.RuneCountInString(message.Name), 50, false))
	}
	if message.Health < 0 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("message.health", message.Health, 0, true))
	}
	if message.Health > 100 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("message.health", message.Health, 100, false))
	}
	if message.Experience < 1 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("message.experience", message.Experience, 1, true))
	}
	if message.Experience > 100 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("message.experience", message.Experience, 100, false))
	}
	return
}

// ValidateUpdateRequest runs the validations defined on UpdateRequest.
func ValidateUpdateRequest(message *characterpb.UpdateRequest) (err error) {
	if message.Character == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("character", "message"))
	}
	if message.Id < 1 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("message.id", message.Id, 1, true))
	}
	if message.Character != nil {
		if err2 := ValidateCharacter2(message.Character); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateCharacter2 runs the validations defined on Character2.
func ValidateCharacter2(character *characterpb.Character2) (err error) {
	if utf8.RuneCountInString(character.Name) < 2 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("character.name", character.Name, utf8.RuneCountInString(character.Name), 2, true))
	}
	if utf8.RuneCountInString(character.Name) > 50 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("character.name", character.Name, utf8.RuneCountInString(character.Name), 50, false))
	}
	if character.Health < 0 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("character.health", character.Health, 0, true))
	}
	if character.Health > 100 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("character.health", character.Health, 100, false))
	}
	if character.Experience < 1 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("character.experience", character.Experience, 1, true))
	}
	if character.Experience > 100 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("character.experience", character.Experience, 100, false))
	}
	return
}

// ValidateRemoveRequest runs the validations defined on RemoveRequest.
func ValidateRemoveRequest(message *characterpb.RemoveRequest) (err error) {
	if message.Id < 1 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("message.id", message.Id, 1, true))
	}
	return
}

// protobufCharacterpbCharacter2ToCharacterCharacter builds a value of type
// *character.Character from a value of type *characterpb.Character2.
func protobufCharacterpbCharacter2ToCharacterCharacter(v *characterpb.Character2) *character.Character {
	res := &character.Character{
		Name:        v.Name,
		Description: v.Description,
		Health:      int(v.Health),
		Experience:  int(v.Experience),
	}

	return res
}

// svcCharacterCharacterToCharacterpbCharacter2 builds a value of type
// *characterpb.Character2 from a value of type *character.Character.
func svcCharacterCharacterToCharacterpbCharacter2(v *character.Character) *characterpb.Character2 {
	res := &characterpb.Character2{
		Name:        v.Name,
		Description: v.Description,
		Health:      int32(v.Health),
		Experience:  int32(v.Experience),
	}

	return res
}
