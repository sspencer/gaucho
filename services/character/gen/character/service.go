// Code generated by goa v3.10.2, DO NOT EDIT.
//
// character service
//
// Command:
// $ goa gen gaucho/services/character/design -o services/character

package character

import (
	"context"
	characterviews "gaucho/services/character/gen/character/views"
)

// Service that provides character API
type Service interface {
	// Retrieve character by the given id
	Get(context.Context, uint32) (res *StoredCharacter, err error)
	// Retrieve all characters
	GetAll(context.Context) (res []*StoredCharacter, err error)
	// Create a character
	Add(context.Context, *Character) (res *StoredCharacter, err error)
	// Update a character
	Update(context.Context, *UpdatePayload) (res *StoredCharacter, err error)
	// Remove character
	Remove(context.Context, *RemovePayload) (err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "character"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [5]string{"get", "get_all", "add", "update", "remove"}

// Character is the payload type of the character service add method.
type Character struct {
	// Unique Character Name
	Name string
	// Character Description
	Description string
	// Character Health
	Health int
	// Character Experience
	Experience int
}

// RemovePayload is the payload type of the character service remove method.
type RemovePayload struct {
	// ID of character to remove
	ID uint32
}

// StoredCharacter is the result type of the character service get method.
type StoredCharacter struct {
	// ID is the unique id of the character.
	ID uint32
	// Unique Character Name
	Name string
	// Character Description
	Description string
	// Character Experience
	Experience int
	// Character Health
	Health int
}

// UpdatePayload is the payload type of the character service update method.
type UpdatePayload struct {
	// ID of character to update
	ID uint32
	// Character parameters to update
	Character *Character
}

// Character name already exists
type AlreadyExists string

// Character not found
type NotFound string

// Error returns an error description.
func (e AlreadyExists) Error() string {
	return "Character name already exists"
}

// ErrorName returns "already_exists".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e AlreadyExists) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "already_exists".
func (e AlreadyExists) GoaErrorName() string {
	return "already_exists"
}

// Error returns an error description.
func (e NotFound) Error() string {
	return "Character not found"
}

// ErrorName returns "not_found".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e NotFound) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "not_found".
func (e NotFound) GoaErrorName() string {
	return "not_found"
}

// NewStoredCharacter initializes result type StoredCharacter from viewed
// result type StoredCharacter.
func NewStoredCharacter(vres *characterviews.StoredCharacter) *StoredCharacter {
	return newStoredCharacter(vres.Projected)
}

// NewViewedStoredCharacter initializes viewed result type StoredCharacter from
// result type StoredCharacter using the given view.
func NewViewedStoredCharacter(res *StoredCharacter, view string) *characterviews.StoredCharacter {
	p := newStoredCharacterView(res)
	return &characterviews.StoredCharacter{Projected: p, View: "default"}
}

// newStoredCharacter converts projected type StoredCharacter to service type
// StoredCharacter.
func newStoredCharacter(vres *characterviews.StoredCharacterView) *StoredCharacter {
	res := &StoredCharacter{}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Name != nil {
		res.Name = *vres.Name
	}
	if vres.Description != nil {
		res.Description = *vres.Description
	}
	if vres.Health != nil {
		res.Health = *vres.Health
	}
	if vres.Experience != nil {
		res.Experience = *vres.Experience
	}
	return res
}

// newStoredCharacterView projects result type StoredCharacter to projected
// type StoredCharacterView using the "default" view.
func newStoredCharacterView(res *StoredCharacter) *characterviews.StoredCharacterView {
	vres := &characterviews.StoredCharacterView{
		ID:          &res.ID,
		Name:        &res.Name,
		Description: &res.Description,
		Experience:  &res.Experience,
		Health:      &res.Health,
	}
	return vres
}
