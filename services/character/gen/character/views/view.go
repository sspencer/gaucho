// Code generated by goa v3.10.2, DO NOT EDIT.
//
// character views
//
// Command:
// $ goa gen gaucho/services/character/design -o services/character

package views

import (
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// StoredCharacter is the viewed result type that is projected based on a view.
type StoredCharacter struct {
	// Type to project
	Projected *StoredCharacterView
	// View to render
	View string
}

// StoredCharacterView is a type that runs validations on a projected type.
type StoredCharacterView struct {
	// ID is the unique id of the character.
	ID *uint32
	// Unique Character Name
	Name *string
	// Character Description
	Description *string
	// Character Experience
	Experience *int
	// Character Health
	Health *int
}

var (
	// StoredCharacterMap is a map indexing the attribute names of StoredCharacter
	// by view name.
	StoredCharacterMap = map[string][]string{
		"default": {
			"id",
			"name",
			"description",
			"health",
			"experience",
		},
	}
)

// ValidateStoredCharacter runs the validations defined on the viewed result
// type StoredCharacter.
func ValidateStoredCharacter(result *StoredCharacter) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateStoredCharacterView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateStoredCharacterView runs the validations defined on
// StoredCharacterView using the "default" view.
func ValidateStoredCharacterView(result *StoredCharacterView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "result"))
	}
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	if result.Health == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("health", "result"))
	}
	if result.Experience == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("experience", "result"))
	}
	if result.Name != nil {
		if utf8.RuneCountInString(*result.Name) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.name", *result.Name, utf8.RuneCountInString(*result.Name), 2, true))
		}
	}
	if result.Name != nil {
		if utf8.RuneCountInString(*result.Name) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.name", *result.Name, utf8.RuneCountInString(*result.Name), 50, false))
		}
	}
	if result.Health != nil {
		if *result.Health < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("result.health", *result.Health, 0, true))
		}
	}
	if result.Health != nil {
		if *result.Health > 100 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("result.health", *result.Health, 100, false))
		}
	}
	if result.Experience != nil {
		if *result.Experience < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("result.experience", *result.Experience, 1, true))
		}
	}
	if result.Experience != nil {
		if *result.Experience > 100 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("result.experience", *result.Experience, 100, false))
		}
	}
	return
}
