// Code generated by goa v3.10.2, DO NOT EDIT.
//
// front HTTP client CLI support package
//
// Command:
// $ goa gen gaucho/services/front/design -o services/front

package client

import (
	"encoding/json"
	"fmt"
	front "gaucho/services/front/gen/front"
	"strconv"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// BuildShowCharacterPayload builds the payload for the front show_character
// endpoint from CLI flags.
func BuildShowCharacterPayload(frontShowCharacterID string) (*front.ShowCharacterPayload, error) {
	var err error
	var id uint32
	{
		var v uint64
		v, err = strconv.ParseUint(frontShowCharacterID, 10, 32)
		id = uint32(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be UINT32")
		}
		if id < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("id", id, 1, true))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &front.ShowCharacterPayload{}
	v.ID = id

	return v, nil
}

// BuildAddCharacterPayload builds the payload for the front add_character
// endpoint from CLI flags.
func BuildAddCharacterPayload(frontAddCharacterBody string) (*front.Character, error) {
	var err error
	var body AddCharacterRequestBody
	{
		err = json.Unmarshal([]byte(frontAddCharacterBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"description\": \"Quia occaecati nesciunt.\",\n      \"experience\": 71,\n      \"health\": 3,\n      \"name\": \"6d\"\n   }'")
		}
		if utf8.RuneCountInString(body.Name) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", body.Name, utf8.RuneCountInString(body.Name), 2, true))
		}
		if utf8.RuneCountInString(body.Name) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", body.Name, utf8.RuneCountInString(body.Name), 50, false))
		}
		if body.Health < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.health", body.Health, 0, true))
		}
		if body.Health > 100 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.health", body.Health, 100, false))
		}
		if body.Experience < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.experience", body.Experience, 1, true))
		}
		if body.Experience > 100 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.experience", body.Experience, 100, false))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &front.Character{
		Name:        body.Name,
		Description: body.Description,
		Health:      body.Health,
		Experience:  body.Experience,
	}

	return v, nil
}

// BuildUpdateCharacterPayload builds the payload for the front
// update_character endpoint from CLI flags.
func BuildUpdateCharacterPayload(frontUpdateCharacterBody string, frontUpdateCharacterID string) (*front.UpdateCharacterPayload, error) {
	var err error
	var body UpdateCharacterRequestBody
	{
		err = json.Unmarshal([]byte(frontUpdateCharacterBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"description\": \"Ex modi cum ea maiores.\",\n      \"experience\": 52,\n      \"health\": 23,\n      \"name\": \"lir\"\n   }'")
		}
		if utf8.RuneCountInString(body.Name) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", body.Name, utf8.RuneCountInString(body.Name), 2, true))
		}
		if utf8.RuneCountInString(body.Name) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", body.Name, utf8.RuneCountInString(body.Name), 50, false))
		}
		if body.Health < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.health", body.Health, 0, true))
		}
		if body.Health > 100 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.health", body.Health, 100, false))
		}
		if body.Experience < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.experience", body.Experience, 1, true))
		}
		if body.Experience > 100 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.experience", body.Experience, 100, false))
		}
		if err != nil {
			return nil, err
		}
	}
	var id uint32
	{
		var v uint64
		v, err = strconv.ParseUint(frontUpdateCharacterID, 10, 32)
		id = uint32(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be UINT32")
		}
		if id < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("id", id, 1, true))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &front.Character{
		Name:        body.Name,
		Description: body.Description,
		Health:      body.Health,
		Experience:  body.Experience,
	}
	res := &front.UpdateCharacterPayload{
		Character: v,
	}
	res.ID = id

	return res, nil
}

// BuildRemoveCharacterPayload builds the payload for the front
// remove_character endpoint from CLI flags.
func BuildRemoveCharacterPayload(frontRemoveCharacterID string) (*front.RemoveCharacterPayload, error) {
	var err error
	var id uint32
	{
		var v uint64
		v, err = strconv.ParseUint(frontRemoveCharacterID, 10, 32)
		id = uint32(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be UINT32")
		}
		if id < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("id", id, 1, true))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &front.RemoveCharacterPayload{}
	v.ID = id

	return v, nil
}

// BuildShowInventoryPayload builds the payload for the front show_inventory
// endpoint from CLI flags.
func BuildShowInventoryPayload(frontShowInventoryID string) (*front.ShowInventoryPayload, error) {
	var err error
	var id uint32
	{
		var v uint64
		v, err = strconv.ParseUint(frontShowInventoryID, 10, 32)
		id = uint32(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be UINT32")
		}
		if id < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("id", id, 1, true))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &front.ShowInventoryPayload{}
	v.ID = id

	return v, nil
}

// BuildUpdateInventoryPayload builds the payload for the front
// update_inventory endpoint from CLI flags.
func BuildUpdateInventoryPayload(frontUpdateInventoryID string, frontUpdateInventoryItemID string) (*front.UpdateInventoryPayload, error) {
	var err error
	var id uint32
	{
		var v uint64
		v, err = strconv.ParseUint(frontUpdateInventoryID, 10, 32)
		id = uint32(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be UINT32")
		}
		if id < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("id", id, 1, true))
		}
		if err != nil {
			return nil, err
		}
	}
	var itemID uint32
	{
		var v uint64
		v, err = strconv.ParseUint(frontUpdateInventoryItemID, 10, 32)
		itemID = uint32(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for itemID, must be UINT32")
		}
		if itemID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("itemID", itemID, 1, true))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &front.UpdateInventoryPayload{}
	v.ID = id
	v.ItemID = itemID

	return v, nil
}

// BuildRemoveInventoryPayload builds the payload for the front
// remove_inventory endpoint from CLI flags.
func BuildRemoveInventoryPayload(frontRemoveInventoryID string, frontRemoveInventoryItemID string) (*front.RemoveInventoryPayload, error) {
	var err error
	var id uint32
	{
		var v uint64
		v, err = strconv.ParseUint(frontRemoveInventoryID, 10, 32)
		id = uint32(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be UINT32")
		}
		if id < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("id", id, 1, true))
		}
		if err != nil {
			return nil, err
		}
	}
	var itemID uint32
	{
		var v uint64
		v, err = strconv.ParseUint(frontRemoveInventoryItemID, 10, 32)
		itemID = uint32(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for itemID, must be UINT32")
		}
		if itemID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("itemID", itemID, 1, true))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &front.RemoveInventoryPayload{}
	v.ID = id
	v.ItemID = itemID

	return v, nil
}

// BuildShowItemPayload builds the payload for the front show_item endpoint
// from CLI flags.
func BuildShowItemPayload(frontShowItemID string) (*front.ShowItemPayload, error) {
	var err error
	var id uint32
	{
		var v uint64
		v, err = strconv.ParseUint(frontShowItemID, 10, 32)
		id = uint32(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be UINT32")
		}
		if id < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("id", id, 1, true))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &front.ShowItemPayload{}
	v.ID = id

	return v, nil
}

// BuildAddItemPayload builds the payload for the front add_item endpoint from
// CLI flags.
func BuildAddItemPayload(frontAddItemBody string) (*front.Item, error) {
	var err error
	var body AddItemRequestBody
	{
		err = json.Unmarshal([]byte(frontAddItemBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"damage\": 1,\n      \"description\": \"Consequatur consequatur dolores tenetur adipisci.\",\n      \"healing\": 30,\n      \"name\": \"q9m\",\n      \"protection\": 14\n   }'")
		}
		if utf8.RuneCountInString(body.Name) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", body.Name, utf8.RuneCountInString(body.Name), 2, true))
		}
		if utf8.RuneCountInString(body.Name) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", body.Name, utf8.RuneCountInString(body.Name), 50, false))
		}
		if body.Damage < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.damage", body.Damage, 0, true))
		}
		if body.Damage > 25 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.damage", body.Damage, 25, false))
		}
		if body.Healing < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.healing", body.Healing, 0, true))
		}
		if body.Healing > 50 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.healing", body.Healing, 50, false))
		}
		if body.Protection < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.protection", body.Protection, 0, true))
		}
		if body.Protection > 20 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.protection", body.Protection, 20, false))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &front.Item{
		Name:        body.Name,
		Description: body.Description,
		Damage:      body.Damage,
		Healing:     body.Healing,
		Protection:  body.Protection,
	}

	return v, nil
}

// BuildUpdateItemPayload builds the payload for the front update_item endpoint
// from CLI flags.
func BuildUpdateItemPayload(frontUpdateItemBody string, frontUpdateItemID string) (*front.UpdateItemPayload, error) {
	var err error
	var body UpdateItemRequestBody
	{
		err = json.Unmarshal([]byte(frontUpdateItemBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"damage\": 4,\n      \"description\": \"Officiis rerum non dolor.\",\n      \"healing\": 42,\n      \"name\": \"dz\",\n      \"protection\": 15\n   }'")
		}
		if utf8.RuneCountInString(body.Name) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", body.Name, utf8.RuneCountInString(body.Name), 2, true))
		}
		if utf8.RuneCountInString(body.Name) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", body.Name, utf8.RuneCountInString(body.Name), 50, false))
		}
		if body.Damage < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.damage", body.Damage, 0, true))
		}
		if body.Damage > 25 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.damage", body.Damage, 25, false))
		}
		if body.Healing < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.healing", body.Healing, 0, true))
		}
		if body.Healing > 50 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.healing", body.Healing, 50, false))
		}
		if body.Protection < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.protection", body.Protection, 0, true))
		}
		if body.Protection > 20 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.protection", body.Protection, 20, false))
		}
		if err != nil {
			return nil, err
		}
	}
	var id uint32
	{
		var v uint64
		v, err = strconv.ParseUint(frontUpdateItemID, 10, 32)
		id = uint32(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be UINT32")
		}
		if id < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("id", id, 1, true))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &front.Item{
		Name:        body.Name,
		Description: body.Description,
		Damage:      body.Damage,
		Healing:     body.Healing,
		Protection:  body.Protection,
	}
	res := &front.UpdateItemPayload{
		Item: v,
	}
	res.ID = id

	return res, nil
}

// BuildRemoveItemPayload builds the payload for the front remove_item endpoint
// from CLI flags.
func BuildRemoveItemPayload(frontRemoveItemID string) (*front.RemoveItemPayload, error) {
	var err error
	var id uint32
	{
		var v uint64
		v, err = strconv.ParseUint(frontRemoveItemID, 10, 32)
		id = uint32(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be UINT32")
		}
		if id < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("id", id, 1, true))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &front.RemoveItemPayload{}
	v.ID = id

	return v, nil
}
