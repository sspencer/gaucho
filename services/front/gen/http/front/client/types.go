// Code generated by goa v3.10.2, DO NOT EDIT.
//
// front HTTP client types
//
// Command:
// $ goa gen gaucho/services/front/design -o services/front

package client

import (
	front "gaucho/services/front/gen/front"
	frontviews "gaucho/services/front/gen/front/views"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// AddCharacterRequestBody is the type of the "front" service "add_character"
// endpoint HTTP request body.
type AddCharacterRequestBody struct {
	// Unique Character Name
	Name string `form:"name" json:"name" xml:"name"`
	// Character Description
	Description string `form:"description" json:"description" xml:"description"`
	// Character Health
	Health int `form:"health" json:"health" xml:"health"`
	// Character Experience
	Experience int `form:"experience" json:"experience" xml:"experience"`
}

// UpdateCharacterRequestBody is the type of the "front" service
// "update_character" endpoint HTTP request body.
type UpdateCharacterRequestBody struct {
	// Unique Character Name
	Name string `form:"name" json:"name" xml:"name"`
	// Character Description
	Description string `form:"description" json:"description" xml:"description"`
	// Character Health
	Health int `form:"health" json:"health" xml:"health"`
	// Character Experience
	Experience int `form:"experience" json:"experience" xml:"experience"`
}

// AddItemRequestBody is the type of the "front" service "add_item" endpoint
// HTTP request body.
type AddItemRequestBody struct {
	// Unique Item Name
	Name string `form:"name" json:"name" xml:"name"`
	// Item Description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Amount of damage item causes
	Damage int `form:"damage" json:"damage" xml:"damage"`
	// Amount of healing item generates
	Healing int `form:"healing" json:"healing" xml:"healing"`
	// Amount of protection item provides
	Protection int `form:"protection" json:"protection" xml:"protection"`
}

// UpdateItemRequestBody is the type of the "front" service "update_item"
// endpoint HTTP request body.
type UpdateItemRequestBody struct {
	// Unique Item Name
	Name string `form:"name" json:"name" xml:"name"`
	// Item Description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Amount of damage item causes
	Damage int `form:"damage" json:"damage" xml:"damage"`
	// Amount of healing item generates
	Healing int `form:"healing" json:"healing" xml:"healing"`
	// Amount of protection item provides
	Protection int `form:"protection" json:"protection" xml:"protection"`
}

// ShowCharacterResponseBody is the type of the "front" service
// "show_character" endpoint HTTP response body.
type ShowCharacterResponseBody struct {
	// ID is the unique id of the character.
	ID *uint32 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Unique Character Name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Character Description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Character Experience
	Experience *int `form:"experience,omitempty" json:"experience,omitempty" xml:"experience,omitempty"`
	// Character Health
	Health *int `form:"health,omitempty" json:"health,omitempty" xml:"health,omitempty"`
}

// ListCharactersResponseBody is the type of the "front" service
// "list_characters" endpoint HTTP response body.
type ListCharactersResponseBody []*StoredCharacterResponse

// AddCharacterResponseBody is the type of the "front" service "add_character"
// endpoint HTTP response body.
type AddCharacterResponseBody struct {
	// ID is the unique id of the character.
	ID *uint32 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Unique Character Name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Character Description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Character Experience
	Experience *int `form:"experience,omitempty" json:"experience,omitempty" xml:"experience,omitempty"`
	// Character Health
	Health *int `form:"health,omitempty" json:"health,omitempty" xml:"health,omitempty"`
}

// UpdateCharacterResponseBody is the type of the "front" service
// "update_character" endpoint HTTP response body.
type UpdateCharacterResponseBody struct {
	// ID is the unique id of the character.
	ID *uint32 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Unique Character Name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Character Description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Character Experience
	Experience *int `form:"experience,omitempty" json:"experience,omitempty" xml:"experience,omitempty"`
	// Character Health
	Health *int `form:"health,omitempty" json:"health,omitempty" xml:"health,omitempty"`
}

// ShowItemResponseBody is the type of the "front" service "show_item" endpoint
// HTTP response body.
type ShowItemResponseBody struct {
	// ID is the unique id of the item.
	ID *uint32 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Unique Item Name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Item Description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Amount of damage item causes
	Damage *int `form:"damage,omitempty" json:"damage,omitempty" xml:"damage,omitempty"`
	// Amount of healing item generates
	Healing *int `form:"healing,omitempty" json:"healing,omitempty" xml:"healing,omitempty"`
	// Amount of protection item provides
	Protection *int `form:"protection,omitempty" json:"protection,omitempty" xml:"protection,omitempty"`
}

// ListItemsResponseBody is the type of the "front" service "list_items"
// endpoint HTTP response body.
type ListItemsResponseBody []*StoredItemResponse

// AddItemResponseBody is the type of the "front" service "add_item" endpoint
// HTTP response body.
type AddItemResponseBody struct {
	// ID is the unique id of the item.
	ID *uint32 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Unique Item Name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Item Description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Amount of damage item causes
	Damage *int `form:"damage,omitempty" json:"damage,omitempty" xml:"damage,omitempty"`
	// Amount of healing item generates
	Healing *int `form:"healing,omitempty" json:"healing,omitempty" xml:"healing,omitempty"`
	// Amount of protection item provides
	Protection *int `form:"protection,omitempty" json:"protection,omitempty" xml:"protection,omitempty"`
}

// UpdateItemResponseBody is the type of the "front" service "update_item"
// endpoint HTTP response body.
type UpdateItemResponseBody struct {
	// ID is the unique id of the item.
	ID *uint32 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Unique Item Name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Item Description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Amount of damage item causes
	Damage *int `form:"damage,omitempty" json:"damage,omitempty" xml:"damage,omitempty"`
	// Amount of healing item generates
	Healing *int `form:"healing,omitempty" json:"healing,omitempty" xml:"healing,omitempty"`
	// Amount of protection item provides
	Protection *int `form:"protection,omitempty" json:"protection,omitempty" xml:"protection,omitempty"`
}

// ShowCharacterNotFoundResponseBody is the type of the "front" service
// "show_character" endpoint HTTP response body for the "not_found" error.
type ShowCharacterNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// AddCharacterAlreadyExistsResponseBody is the type of the "front" service
// "add_character" endpoint HTTP response body for the "already_exists" error.
type AddCharacterAlreadyExistsResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// UpdateCharacterNotFoundResponseBody is the type of the "front" service
// "update_character" endpoint HTTP response body for the "not_found" error.
type UpdateCharacterNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// UpdateCharacterAlreadyExistsResponseBody is the type of the "front" service
// "update_character" endpoint HTTP response body for the "already_exists"
// error.
type UpdateCharacterAlreadyExistsResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// RemoveCharacterNotFoundResponseBody is the type of the "front" service
// "remove_character" endpoint HTTP response body for the "not_found" error.
type RemoveCharacterNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// RemoveInventoryNotFoundResponseBody is the type of the "front" service
// "remove_inventory" endpoint HTTP response body for the "not_found" error.
type RemoveInventoryNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ShowItemNotFoundResponseBody is the type of the "front" service "show_item"
// endpoint HTTP response body for the "not_found" error.
type ShowItemNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// AddItemAlreadyExistsResponseBody is the type of the "front" service
// "add_item" endpoint HTTP response body for the "already_exists" error.
type AddItemAlreadyExistsResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// UpdateItemNotFoundResponseBody is the type of the "front" service
// "update_item" endpoint HTTP response body for the "not_found" error.
type UpdateItemNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// UpdateItemAlreadyExistsResponseBody is the type of the "front" service
// "update_item" endpoint HTTP response body for the "already_exists" error.
type UpdateItemAlreadyExistsResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// RemoveItemNotFoundResponseBody is the type of the "front" service
// "remove_item" endpoint HTTP response body for the "not_found" error.
type RemoveItemNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// StoredCharacterResponse is used to define fields on response body types.
type StoredCharacterResponse struct {
	// ID is the unique id of the character.
	ID *uint32 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Unique Character Name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Character Description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Character Experience
	Experience *int `form:"experience,omitempty" json:"experience,omitempty" xml:"experience,omitempty"`
	// Character Health
	Health *int `form:"health,omitempty" json:"health,omitempty" xml:"health,omitempty"`
}

// StoredItemResponse is used to define fields on response body types.
type StoredItemResponse struct {
	// ID is the unique id of the item.
	ID *uint32 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Unique Item Name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Item Description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Amount of damage item causes
	Damage *int `form:"damage,omitempty" json:"damage,omitempty" xml:"damage,omitempty"`
	// Amount of healing item generates
	Healing *int `form:"healing,omitempty" json:"healing,omitempty" xml:"healing,omitempty"`
	// Amount of protection item provides
	Protection *int `form:"protection,omitempty" json:"protection,omitempty" xml:"protection,omitempty"`
}

// NewAddCharacterRequestBody builds the HTTP request body from the payload of
// the "add_character" endpoint of the "front" service.
func NewAddCharacterRequestBody(p *front.Character) *AddCharacterRequestBody {
	body := &AddCharacterRequestBody{
		Name:        p.Name,
		Description: p.Description,
		Health:      p.Health,
		Experience:  p.Experience,
	}
	return body
}

// NewUpdateCharacterRequestBody builds the HTTP request body from the payload
// of the "update_character" endpoint of the "front" service.
func NewUpdateCharacterRequestBody(p *front.UpdateCharacterPayload) *UpdateCharacterRequestBody {
	body := &UpdateCharacterRequestBody{
		Name:        p.Character.Name,
		Description: p.Character.Description,
		Health:      p.Character.Health,
		Experience:  p.Character.Experience,
	}
	return body
}

// NewAddItemRequestBody builds the HTTP request body from the payload of the
// "add_item" endpoint of the "front" service.
func NewAddItemRequestBody(p *front.Item) *AddItemRequestBody {
	body := &AddItemRequestBody{
		Name:        p.Name,
		Description: p.Description,
		Damage:      p.Damage,
		Healing:     p.Healing,
		Protection:  p.Protection,
	}
	return body
}

// NewUpdateItemRequestBody builds the HTTP request body from the payload of
// the "update_item" endpoint of the "front" service.
func NewUpdateItemRequestBody(p *front.UpdateItemPayload) *UpdateItemRequestBody {
	body := &UpdateItemRequestBody{
		Name:        p.Item.Name,
		Description: p.Item.Description,
		Damage:      p.Item.Damage,
		Healing:     p.Item.Healing,
		Protection:  p.Item.Protection,
	}
	return body
}

// NewShowCharacterStoredCharacterOK builds a "front" service "show_character"
// endpoint result from a HTTP "OK" response.
func NewShowCharacterStoredCharacterOK(body *ShowCharacterResponseBody) *frontviews.StoredCharacterView {
	v := &frontviews.StoredCharacterView{
		ID:          body.ID,
		Name:        body.Name,
		Description: body.Description,
		Experience:  body.Experience,
		Health:      body.Health,
	}

	return v
}

// NewShowCharacterNotFound builds a front service show_character endpoint
// not_found error.
func NewShowCharacterNotFound(body *ShowCharacterNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewListCharactersStoredCharacterOK builds a "front" service
// "list_characters" endpoint result from a HTTP "OK" response.
func NewListCharactersStoredCharacterOK(body []*StoredCharacterResponse) []*front.StoredCharacter {
	v := make([]*front.StoredCharacter, len(body))
	for i, val := range body {
		v[i] = unmarshalStoredCharacterResponseToFrontStoredCharacter(val)
	}

	return v
}

// NewAddCharacterStoredCharacterOK builds a "front" service "add_character"
// endpoint result from a HTTP "OK" response.
func NewAddCharacterStoredCharacterOK(body *AddCharacterResponseBody) *frontviews.StoredCharacterView {
	v := &frontviews.StoredCharacterView{
		ID:          body.ID,
		Name:        body.Name,
		Description: body.Description,
		Experience:  body.Experience,
		Health:      body.Health,
	}

	return v
}

// NewAddCharacterAlreadyExists builds a front service add_character endpoint
// already_exists error.
func NewAddCharacterAlreadyExists(body *AddCharacterAlreadyExistsResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewUpdateCharacterStoredCharacterOK builds a "front" service
// "update_character" endpoint result from a HTTP "OK" response.
func NewUpdateCharacterStoredCharacterOK(body *UpdateCharacterResponseBody) *frontviews.StoredCharacterView {
	v := &frontviews.StoredCharacterView{
		ID:          body.ID,
		Name:        body.Name,
		Description: body.Description,
		Experience:  body.Experience,
		Health:      body.Health,
	}

	return v
}

// NewUpdateCharacterNotFound builds a front service update_character endpoint
// not_found error.
func NewUpdateCharacterNotFound(body *UpdateCharacterNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewUpdateCharacterAlreadyExists builds a front service update_character
// endpoint already_exists error.
func NewUpdateCharacterAlreadyExists(body *UpdateCharacterAlreadyExistsResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewRemoveCharacterNotFound builds a front service remove_character endpoint
// not_found error.
func NewRemoveCharacterNotFound(body *RemoveCharacterNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewRemoveInventoryNotFound builds a front service remove_inventory endpoint
// not_found error.
func NewRemoveInventoryNotFound(body *RemoveInventoryNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewShowItemStoredItemOK builds a "front" service "show_item" endpoint result
// from a HTTP "OK" response.
func NewShowItemStoredItemOK(body *ShowItemResponseBody) *frontviews.StoredItemView {
	v := &frontviews.StoredItemView{
		ID:          body.ID,
		Name:        body.Name,
		Description: body.Description,
		Damage:      body.Damage,
		Healing:     body.Healing,
		Protection:  body.Protection,
	}

	return v
}

// NewShowItemNotFound builds a front service show_item endpoint not_found
// error.
func NewShowItemNotFound(body *ShowItemNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewListItemsStoredItemOK builds a "front" service "list_items" endpoint
// result from a HTTP "OK" response.
func NewListItemsStoredItemOK(body []*StoredItemResponse) []*front.StoredItem {
	v := make([]*front.StoredItem, len(body))
	for i, val := range body {
		v[i] = unmarshalStoredItemResponseToFrontStoredItem(val)
	}

	return v
}

// NewAddItemStoredItemOK builds a "front" service "add_item" endpoint result
// from a HTTP "OK" response.
func NewAddItemStoredItemOK(body *AddItemResponseBody) *frontviews.StoredItemView {
	v := &frontviews.StoredItemView{
		ID:          body.ID,
		Name:        body.Name,
		Description: body.Description,
		Damage:      body.Damage,
		Healing:     body.Healing,
		Protection:  body.Protection,
	}

	return v
}

// NewAddItemAlreadyExists builds a front service add_item endpoint
// already_exists error.
func NewAddItemAlreadyExists(body *AddItemAlreadyExistsResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewUpdateItemStoredItemOK builds a "front" service "update_item" endpoint
// result from a HTTP "OK" response.
func NewUpdateItemStoredItemOK(body *UpdateItemResponseBody) *frontviews.StoredItemView {
	v := &frontviews.StoredItemView{
		ID:          body.ID,
		Name:        body.Name,
		Description: body.Description,
		Damage:      body.Damage,
		Healing:     body.Healing,
		Protection:  body.Protection,
	}

	return v
}

// NewUpdateItemNotFound builds a front service update_item endpoint not_found
// error.
func NewUpdateItemNotFound(body *UpdateItemNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewUpdateItemAlreadyExists builds a front service update_item endpoint
// already_exists error.
func NewUpdateItemAlreadyExists(body *UpdateItemAlreadyExistsResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewRemoveItemNotFound builds a front service remove_item endpoint not_found
// error.
func NewRemoveItemNotFound(body *RemoveItemNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateShowCharacterNotFoundResponseBody runs the validations defined on
// show_character_not_found_response_body
func ValidateShowCharacterNotFoundResponseBody(body *ShowCharacterNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateAddCharacterAlreadyExistsResponseBody runs the validations defined
// on add_character_already_exists_response_body
func ValidateAddCharacterAlreadyExistsResponseBody(body *AddCharacterAlreadyExistsResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateUpdateCharacterNotFoundResponseBody runs the validations defined on
// update_character_not_found_response_body
func ValidateUpdateCharacterNotFoundResponseBody(body *UpdateCharacterNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateUpdateCharacterAlreadyExistsResponseBody runs the validations
// defined on update_character_already_exists_response_body
func ValidateUpdateCharacterAlreadyExistsResponseBody(body *UpdateCharacterAlreadyExistsResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateRemoveCharacterNotFoundResponseBody runs the validations defined on
// remove_character_not_found_response_body
func ValidateRemoveCharacterNotFoundResponseBody(body *RemoveCharacterNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateRemoveInventoryNotFoundResponseBody runs the validations defined on
// remove_inventory_not_found_response_body
func ValidateRemoveInventoryNotFoundResponseBody(body *RemoveInventoryNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateShowItemNotFoundResponseBody runs the validations defined on
// show_item_not_found_response_body
func ValidateShowItemNotFoundResponseBody(body *ShowItemNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateAddItemAlreadyExistsResponseBody runs the validations defined on
// add_item_already_exists_response_body
func ValidateAddItemAlreadyExistsResponseBody(body *AddItemAlreadyExistsResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateUpdateItemNotFoundResponseBody runs the validations defined on
// update_item_not_found_response_body
func ValidateUpdateItemNotFoundResponseBody(body *UpdateItemNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateUpdateItemAlreadyExistsResponseBody runs the validations defined on
// update_item_already_exists_response_body
func ValidateUpdateItemAlreadyExistsResponseBody(body *UpdateItemAlreadyExistsResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateRemoveItemNotFoundResponseBody runs the validations defined on
// remove_item_not_found_response_body
func ValidateRemoveItemNotFoundResponseBody(body *RemoveItemNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateStoredCharacterResponse runs the validations defined on
// StoredCharacterResponse
func ValidateStoredCharacterResponse(body *StoredCharacterResponse) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Health == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("health", "body"))
	}
	if body.Experience == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("experience", "body"))
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 2, true))
		}
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 50, false))
		}
	}
	if body.Experience != nil {
		if *body.Experience < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.experience", *body.Experience, 1, true))
		}
	}
	if body.Experience != nil {
		if *body.Experience > 100 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.experience", *body.Experience, 100, false))
		}
	}
	if body.Health != nil {
		if *body.Health < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.health", *body.Health, 0, true))
		}
	}
	if body.Health != nil {
		if *body.Health > 100 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.health", *body.Health, 100, false))
		}
	}
	return
}

// ValidateStoredItemResponse runs the validations defined on StoredItemResponse
func ValidateStoredItemResponse(body *StoredItemResponse) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Damage == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("damage", "body"))
	}
	if body.Healing == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("healing", "body"))
	}
	if body.Protection == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("protection", "body"))
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 2, true))
		}
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 50, false))
		}
	}
	if body.Damage != nil {
		if *body.Damage < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.damage", *body.Damage, 0, true))
		}
	}
	if body.Damage != nil {
		if *body.Damage > 25 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.damage", *body.Damage, 25, false))
		}
	}
	if body.Healing != nil {
		if *body.Healing < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.healing", *body.Healing, 0, true))
		}
	}
	if body.Healing != nil {
		if *body.Healing > 50 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.healing", *body.Healing, 50, false))
		}
	}
	if body.Protection != nil {
		if *body.Protection < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.protection", *body.Protection, 0, true))
		}
	}
	if body.Protection != nil {
		if *body.Protection > 20 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.protection", *body.Protection, 20, false))
		}
	}
	return
}
