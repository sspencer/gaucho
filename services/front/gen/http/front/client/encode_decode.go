// Code generated by goa v3.10.2, DO NOT EDIT.
//
// front HTTP client encoders and decoders
//
// Command:
// $ goa gen gaucho/services/front/design -o services/front

package client

import (
	"bytes"
	"context"
	front "gaucho/services/front/gen/front"
	frontviews "gaucho/services/front/gen/front/views"
	"io"
	"net/http"
	"net/url"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// BuildShowCharacterRequest instantiates a HTTP request object with method and
// path set to call the "front" service "show_character" endpoint
func (c *Client) BuildShowCharacterRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id uint32
	)
	{
		p, ok := v.(*front.ShowCharacterPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("front", "show_character", "*front.ShowCharacterPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ShowCharacterFrontPath(id)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("front", "show_character", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeShowCharacterResponse returns a decoder for responses returned by the
// front show_character endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeShowCharacterResponse may return the following errors:
//   - "not_found" (type *goa.ServiceError): http.StatusNotFound
//   - error: internal error
func DecodeShowCharacterResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ShowCharacterResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("front", "show_character", err)
			}
			p := NewShowCharacterStoredCharacterOK(&body)
			view := "default"
			vres := &frontviews.StoredCharacter{Projected: p, View: view}
			if err = frontviews.ValidateStoredCharacter(vres); err != nil {
				return nil, goahttp.ErrValidationError("front", "show_character", err)
			}
			res := front.NewStoredCharacter(vres)
			return res, nil
		case http.StatusNotFound:
			var (
				body ShowCharacterNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("front", "show_character", err)
			}
			err = ValidateShowCharacterNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("front", "show_character", err)
			}
			return nil, NewShowCharacterNotFound(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("front", "show_character", resp.StatusCode, string(body))
		}
	}
}

// BuildListCharactersRequest instantiates a HTTP request object with method
// and path set to call the "front" service "list_characters" endpoint
func (c *Client) BuildListCharactersRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListCharactersFrontPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("front", "list_characters", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeListCharactersResponse returns a decoder for responses returned by the
// front list_characters endpoint. restoreBody controls whether the response
// body should be restored after having been read.
func DecodeListCharactersResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListCharactersResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("front", "list_characters", err)
			}
			for _, e := range body {
				if e != nil {
					if err2 := ValidateStoredCharacterResponse(e); err2 != nil {
						err = goa.MergeErrors(err, err2)
					}
				}
			}
			if err != nil {
				return nil, goahttp.ErrValidationError("front", "list_characters", err)
			}
			res := NewListCharactersStoredCharacterOK(body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("front", "list_characters", resp.StatusCode, string(body))
		}
	}
}

// BuildAddCharacterRequest instantiates a HTTP request object with method and
// path set to call the "front" service "add_character" endpoint
func (c *Client) BuildAddCharacterRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: AddCharacterFrontPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("front", "add_character", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeAddCharacterRequest returns an encoder for requests sent to the front
// add_character server.
func EncodeAddCharacterRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*front.Character)
		if !ok {
			return goahttp.ErrInvalidType("front", "add_character", "*front.Character", v)
		}
		body := NewAddCharacterRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("front", "add_character", err)
		}
		return nil
	}
}

// DecodeAddCharacterResponse returns a decoder for responses returned by the
// front add_character endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeAddCharacterResponse may return the following errors:
//   - "already_exists" (type *goa.ServiceError): http.StatusBadRequest
//   - error: internal error
func DecodeAddCharacterResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body AddCharacterResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("front", "add_character", err)
			}
			p := NewAddCharacterStoredCharacterOK(&body)
			view := "default"
			vres := &frontviews.StoredCharacter{Projected: p, View: view}
			if err = frontviews.ValidateStoredCharacter(vres); err != nil {
				return nil, goahttp.ErrValidationError("front", "add_character", err)
			}
			res := front.NewStoredCharacter(vres)
			return res, nil
		case http.StatusBadRequest:
			var (
				body AddCharacterAlreadyExistsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("front", "add_character", err)
			}
			err = ValidateAddCharacterAlreadyExistsResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("front", "add_character", err)
			}
			return nil, NewAddCharacterAlreadyExists(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("front", "add_character", resp.StatusCode, string(body))
		}
	}
}

// BuildUpdateCharacterRequest instantiates a HTTP request object with method
// and path set to call the "front" service "update_character" endpoint
func (c *Client) BuildUpdateCharacterRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id uint32
	)
	{
		p, ok := v.(*front.UpdateCharacterPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("front", "update_character", "*front.UpdateCharacterPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdateCharacterFrontPath(id)}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("front", "update_character", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpdateCharacterRequest returns an encoder for requests sent to the
// front update_character server.
func EncodeUpdateCharacterRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*front.UpdateCharacterPayload)
		if !ok {
			return goahttp.ErrInvalidType("front", "update_character", "*front.UpdateCharacterPayload", v)
		}
		body := NewUpdateCharacterRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("front", "update_character", err)
		}
		return nil
	}
}

// DecodeUpdateCharacterResponse returns a decoder for responses returned by
// the front update_character endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeUpdateCharacterResponse may return the following errors:
//   - "not_found" (type *goa.ServiceError): http.StatusNotFound
//   - "already_exists" (type *goa.ServiceError): http.StatusBadRequest
//   - error: internal error
func DecodeUpdateCharacterResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UpdateCharacterResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("front", "update_character", err)
			}
			p := NewUpdateCharacterStoredCharacterOK(&body)
			view := "default"
			vres := &frontviews.StoredCharacter{Projected: p, View: view}
			if err = frontviews.ValidateStoredCharacter(vres); err != nil {
				return nil, goahttp.ErrValidationError("front", "update_character", err)
			}
			res := front.NewStoredCharacter(vres)
			return res, nil
		case http.StatusNotFound:
			var (
				body UpdateCharacterNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("front", "update_character", err)
			}
			err = ValidateUpdateCharacterNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("front", "update_character", err)
			}
			return nil, NewUpdateCharacterNotFound(&body)
		case http.StatusBadRequest:
			var (
				body UpdateCharacterAlreadyExistsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("front", "update_character", err)
			}
			err = ValidateUpdateCharacterAlreadyExistsResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("front", "update_character", err)
			}
			return nil, NewUpdateCharacterAlreadyExists(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("front", "update_character", resp.StatusCode, string(body))
		}
	}
}

// BuildRemoveCharacterRequest instantiates a HTTP request object with method
// and path set to call the "front" service "remove_character" endpoint
func (c *Client) BuildRemoveCharacterRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id uint32
	)
	{
		p, ok := v.(*front.RemoveCharacterPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("front", "remove_character", "*front.RemoveCharacterPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: RemoveCharacterFrontPath(id)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("front", "remove_character", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeRemoveCharacterResponse returns a decoder for responses returned by
// the front remove_character endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeRemoveCharacterResponse may return the following errors:
//   - "not_found" (type *goa.ServiceError): http.StatusNotFound
//   - error: internal error
func DecodeRemoveCharacterResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		case http.StatusNotFound:
			var (
				body RemoveCharacterNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("front", "remove_character", err)
			}
			err = ValidateRemoveCharacterNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("front", "remove_character", err)
			}
			return nil, NewRemoveCharacterNotFound(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("front", "remove_character", resp.StatusCode, string(body))
		}
	}
}

// BuildShowInventoryRequest instantiates a HTTP request object with method and
// path set to call the "front" service "show_inventory" endpoint
func (c *Client) BuildShowInventoryRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id uint32
	)
	{
		p, ok := v.(*front.ShowInventoryPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("front", "show_inventory", "*front.ShowInventoryPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ShowInventoryFrontPath(id)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("front", "show_inventory", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeShowInventoryResponse returns a decoder for responses returned by the
// front show_inventory endpoint. restoreBody controls whether the response
// body should be restored after having been read.
func DecodeShowInventoryResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body []uint32
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("front", "show_inventory", err)
			}
			return body, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("front", "show_inventory", resp.StatusCode, string(body))
		}
	}
}

// BuildUpdateInventoryRequest instantiates a HTTP request object with method
// and path set to call the "front" service "update_inventory" endpoint
func (c *Client) BuildUpdateInventoryRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id     uint32
		itemID uint32
	)
	{
		p, ok := v.(*front.UpdateInventoryPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("front", "update_inventory", "*front.UpdateInventoryPayload", v)
		}
		id = p.ID
		itemID = p.ItemID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdateInventoryFrontPath(id, itemID)}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("front", "update_inventory", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeUpdateInventoryResponse returns a decoder for responses returned by
// the front update_inventory endpoint. restoreBody controls whether the
// response body should be restored after having been read.
func DecodeUpdateInventoryResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body []uint32
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("front", "update_inventory", err)
			}
			return body, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("front", "update_inventory", resp.StatusCode, string(body))
		}
	}
}

// BuildRemoveInventoryRequest instantiates a HTTP request object with method
// and path set to call the "front" service "remove_inventory" endpoint
func (c *Client) BuildRemoveInventoryRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id     uint32
		itemID uint32
	)
	{
		p, ok := v.(*front.RemoveInventoryPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("front", "remove_inventory", "*front.RemoveInventoryPayload", v)
		}
		id = p.ID
		itemID = p.ItemID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: RemoveInventoryFrontPath(id, itemID)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("front", "remove_inventory", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeRemoveInventoryResponse returns a decoder for responses returned by
// the front remove_inventory endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeRemoveInventoryResponse may return the following errors:
//   - "not_found" (type *goa.ServiceError): http.StatusNotFound
//   - error: internal error
func DecodeRemoveInventoryResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		case http.StatusNotFound:
			var (
				body RemoveInventoryNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("front", "remove_inventory", err)
			}
			err = ValidateRemoveInventoryNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("front", "remove_inventory", err)
			}
			return nil, NewRemoveInventoryNotFound(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("front", "remove_inventory", resp.StatusCode, string(body))
		}
	}
}

// BuildShowItemRequest instantiates a HTTP request object with method and path
// set to call the "front" service "show_item" endpoint
func (c *Client) BuildShowItemRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id uint32
	)
	{
		p, ok := v.(*front.ShowItemPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("front", "show_item", "*front.ShowItemPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ShowItemFrontPath(id)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("front", "show_item", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeShowItemResponse returns a decoder for responses returned by the front
// show_item endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeShowItemResponse may return the following errors:
//   - "not_found" (type *goa.ServiceError): http.StatusNotFound
//   - error: internal error
func DecodeShowItemResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ShowItemResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("front", "show_item", err)
			}
			p := NewShowItemStoredItemOK(&body)
			view := "default"
			vres := &frontviews.StoredItem{Projected: p, View: view}
			if err = frontviews.ValidateStoredItem(vres); err != nil {
				return nil, goahttp.ErrValidationError("front", "show_item", err)
			}
			res := front.NewStoredItem(vres)
			return res, nil
		case http.StatusNotFound:
			var (
				body ShowItemNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("front", "show_item", err)
			}
			err = ValidateShowItemNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("front", "show_item", err)
			}
			return nil, NewShowItemNotFound(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("front", "show_item", resp.StatusCode, string(body))
		}
	}
}

// BuildListItemsRequest instantiates a HTTP request object with method and
// path set to call the "front" service "list_items" endpoint
func (c *Client) BuildListItemsRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListItemsFrontPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("front", "list_items", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeListItemsResponse returns a decoder for responses returned by the
// front list_items endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeListItemsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListItemsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("front", "list_items", err)
			}
			for _, e := range body {
				if e != nil {
					if err2 := ValidateStoredItemResponse(e); err2 != nil {
						err = goa.MergeErrors(err, err2)
					}
				}
			}
			if err != nil {
				return nil, goahttp.ErrValidationError("front", "list_items", err)
			}
			res := NewListItemsStoredItemOK(body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("front", "list_items", resp.StatusCode, string(body))
		}
	}
}

// BuildAddItemRequest instantiates a HTTP request object with method and path
// set to call the "front" service "add_item" endpoint
func (c *Client) BuildAddItemRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: AddItemFrontPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("front", "add_item", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeAddItemRequest returns an encoder for requests sent to the front
// add_item server.
func EncodeAddItemRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*front.Item)
		if !ok {
			return goahttp.ErrInvalidType("front", "add_item", "*front.Item", v)
		}
		body := NewAddItemRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("front", "add_item", err)
		}
		return nil
	}
}

// DecodeAddItemResponse returns a decoder for responses returned by the front
// add_item endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeAddItemResponse may return the following errors:
//   - "already_exists" (type *goa.ServiceError): http.StatusBadRequest
//   - error: internal error
func DecodeAddItemResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body AddItemResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("front", "add_item", err)
			}
			p := NewAddItemStoredItemOK(&body)
			view := "default"
			vres := &frontviews.StoredItem{Projected: p, View: view}
			if err = frontviews.ValidateStoredItem(vres); err != nil {
				return nil, goahttp.ErrValidationError("front", "add_item", err)
			}
			res := front.NewStoredItem(vres)
			return res, nil
		case http.StatusBadRequest:
			var (
				body AddItemAlreadyExistsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("front", "add_item", err)
			}
			err = ValidateAddItemAlreadyExistsResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("front", "add_item", err)
			}
			return nil, NewAddItemAlreadyExists(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("front", "add_item", resp.StatusCode, string(body))
		}
	}
}

// BuildUpdateItemRequest instantiates a HTTP request object with method and
// path set to call the "front" service "update_item" endpoint
func (c *Client) BuildUpdateItemRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id uint32
	)
	{
		p, ok := v.(*front.UpdateItemPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("front", "update_item", "*front.UpdateItemPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdateItemFrontPath(id)}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("front", "update_item", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpdateItemRequest returns an encoder for requests sent to the front
// update_item server.
func EncodeUpdateItemRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*front.UpdateItemPayload)
		if !ok {
			return goahttp.ErrInvalidType("front", "update_item", "*front.UpdateItemPayload", v)
		}
		body := NewUpdateItemRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("front", "update_item", err)
		}
		return nil
	}
}

// DecodeUpdateItemResponse returns a decoder for responses returned by the
// front update_item endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeUpdateItemResponse may return the following errors:
//   - "not_found" (type *goa.ServiceError): http.StatusNotFound
//   - "already_exists" (type *goa.ServiceError): http.StatusBadRequest
//   - error: internal error
func DecodeUpdateItemResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UpdateItemResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("front", "update_item", err)
			}
			p := NewUpdateItemStoredItemOK(&body)
			view := "default"
			vres := &frontviews.StoredItem{Projected: p, View: view}
			if err = frontviews.ValidateStoredItem(vres); err != nil {
				return nil, goahttp.ErrValidationError("front", "update_item", err)
			}
			res := front.NewStoredItem(vres)
			return res, nil
		case http.StatusNotFound:
			var (
				body UpdateItemNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("front", "update_item", err)
			}
			err = ValidateUpdateItemNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("front", "update_item", err)
			}
			return nil, NewUpdateItemNotFound(&body)
		case http.StatusBadRequest:
			var (
				body UpdateItemAlreadyExistsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("front", "update_item", err)
			}
			err = ValidateUpdateItemAlreadyExistsResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("front", "update_item", err)
			}
			return nil, NewUpdateItemAlreadyExists(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("front", "update_item", resp.StatusCode, string(body))
		}
	}
}

// BuildRemoveItemRequest instantiates a HTTP request object with method and
// path set to call the "front" service "remove_item" endpoint
func (c *Client) BuildRemoveItemRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id uint32
	)
	{
		p, ok := v.(*front.RemoveItemPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("front", "remove_item", "*front.RemoveItemPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: RemoveItemFrontPath(id)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("front", "remove_item", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeRemoveItemResponse returns a decoder for responses returned by the
// front remove_item endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeRemoveItemResponse may return the following errors:
//   - "not_found" (type *goa.ServiceError): http.StatusNotFound
//   - error: internal error
func DecodeRemoveItemResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		case http.StatusNotFound:
			var (
				body RemoveItemNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("front", "remove_item", err)
			}
			err = ValidateRemoveItemNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("front", "remove_item", err)
			}
			return nil, NewRemoveItemNotFound(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("front", "remove_item", resp.StatusCode, string(body))
		}
	}
}

// unmarshalStoredCharacterResponseToFrontStoredCharacter builds a value of
// type *front.StoredCharacter from a value of type *StoredCharacterResponse.
func unmarshalStoredCharacterResponseToFrontStoredCharacter(v *StoredCharacterResponse) *front.StoredCharacter {
	res := &front.StoredCharacter{
		ID:          *v.ID,
		Name:        *v.Name,
		Description: *v.Description,
		Experience:  *v.Experience,
		Health:      *v.Health,
	}

	return res
}

// unmarshalStoredItemResponseToFrontStoredItem builds a value of type
// *front.StoredItem from a value of type *StoredItemResponse.
func unmarshalStoredItemResponseToFrontStoredItem(v *StoredItemResponse) *front.StoredItem {
	res := &front.StoredItem{
		ID:          *v.ID,
		Name:        *v.Name,
		Description: v.Description,
		Damage:      *v.Damage,
		Healing:     *v.Healing,
		Protection:  *v.Protection,
	}

	return res
}
