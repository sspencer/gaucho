// Code generated by goa v3.10.2, DO NOT EDIT.
//
// FrontServer HTTP client CLI support package
//
// Command:
// $ goa gen gaucho/services/front/design -o services/front

package cli

import (
	"flag"
	"fmt"
	frontc "gaucho/services/front/gen/http/front/client"
	"net/http"
	"os"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `front (show-character|list-characters|add-character|update-character|remove-character|show-inventory|update-inventory|remove-inventory|show-item|list-items|add-item|update-item|remove-item)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` front show-character --id 3593618710` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		frontFlags = flag.NewFlagSet("front", flag.ContinueOnError)

		frontShowCharacterFlags  = flag.NewFlagSet("show-character", flag.ExitOnError)
		frontShowCharacterIDFlag = frontShowCharacterFlags.String("id", "REQUIRED", "ID of character to retrieve")

		frontListCharactersFlags = flag.NewFlagSet("list-characters", flag.ExitOnError)

		frontAddCharacterFlags    = flag.NewFlagSet("add-character", flag.ExitOnError)
		frontAddCharacterBodyFlag = frontAddCharacterFlags.String("body", "REQUIRED", "")

		frontUpdateCharacterFlags    = flag.NewFlagSet("update-character", flag.ExitOnError)
		frontUpdateCharacterBodyFlag = frontUpdateCharacterFlags.String("body", "REQUIRED", "")
		frontUpdateCharacterIDFlag   = frontUpdateCharacterFlags.String("id", "REQUIRED", "ID of character to update")

		frontRemoveCharacterFlags  = flag.NewFlagSet("remove-character", flag.ExitOnError)
		frontRemoveCharacterIDFlag = frontRemoveCharacterFlags.String("id", "REQUIRED", "ID of character to remove")

		frontShowInventoryFlags  = flag.NewFlagSet("show-inventory", flag.ExitOnError)
		frontShowInventoryIDFlag = frontShowInventoryFlags.String("id", "REQUIRED", "Character ID")

		frontUpdateInventoryFlags      = flag.NewFlagSet("update-inventory", flag.ExitOnError)
		frontUpdateInventoryIDFlag     = frontUpdateInventoryFlags.String("id", "REQUIRED", "Character ID")
		frontUpdateInventoryItemIDFlag = frontUpdateInventoryFlags.String("item-id", "REQUIRED", "Item ID")

		frontRemoveInventoryFlags      = flag.NewFlagSet("remove-inventory", flag.ExitOnError)
		frontRemoveInventoryIDFlag     = frontRemoveInventoryFlags.String("id", "REQUIRED", "Character ID")
		frontRemoveInventoryItemIDFlag = frontRemoveInventoryFlags.String("item-id", "REQUIRED", "Item ID")

		frontShowItemFlags  = flag.NewFlagSet("show-item", flag.ExitOnError)
		frontShowItemIDFlag = frontShowItemFlags.String("id", "REQUIRED", "ID of item to retrieve")

		frontListItemsFlags = flag.NewFlagSet("list-items", flag.ExitOnError)

		frontAddItemFlags    = flag.NewFlagSet("add-item", flag.ExitOnError)
		frontAddItemBodyFlag = frontAddItemFlags.String("body", "REQUIRED", "")

		frontUpdateItemFlags    = flag.NewFlagSet("update-item", flag.ExitOnError)
		frontUpdateItemBodyFlag = frontUpdateItemFlags.String("body", "REQUIRED", "")
		frontUpdateItemIDFlag   = frontUpdateItemFlags.String("id", "REQUIRED", "ID of item to update")

		frontRemoveItemFlags  = flag.NewFlagSet("remove-item", flag.ExitOnError)
		frontRemoveItemIDFlag = frontRemoveItemFlags.String("id", "REQUIRED", "ID of item to remove")
	)
	frontFlags.Usage = frontUsage
	frontShowCharacterFlags.Usage = frontShowCharacterUsage
	frontListCharactersFlags.Usage = frontListCharactersUsage
	frontAddCharacterFlags.Usage = frontAddCharacterUsage
	frontUpdateCharacterFlags.Usage = frontUpdateCharacterUsage
	frontRemoveCharacterFlags.Usage = frontRemoveCharacterUsage
	frontShowInventoryFlags.Usage = frontShowInventoryUsage
	frontUpdateInventoryFlags.Usage = frontUpdateInventoryUsage
	frontRemoveInventoryFlags.Usage = frontRemoveInventoryUsage
	frontShowItemFlags.Usage = frontShowItemUsage
	frontListItemsFlags.Usage = frontListItemsUsage
	frontAddItemFlags.Usage = frontAddItemUsage
	frontUpdateItemFlags.Usage = frontUpdateItemUsage
	frontRemoveItemFlags.Usage = frontRemoveItemUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "front":
			svcf = frontFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "front":
			switch epn {
			case "show-character":
				epf = frontShowCharacterFlags

			case "list-characters":
				epf = frontListCharactersFlags

			case "add-character":
				epf = frontAddCharacterFlags

			case "update-character":
				epf = frontUpdateCharacterFlags

			case "remove-character":
				epf = frontRemoveCharacterFlags

			case "show-inventory":
				epf = frontShowInventoryFlags

			case "update-inventory":
				epf = frontUpdateInventoryFlags

			case "remove-inventory":
				epf = frontRemoveInventoryFlags

			case "show-item":
				epf = frontShowItemFlags

			case "list-items":
				epf = frontListItemsFlags

			case "add-item":
				epf = frontAddItemFlags

			case "update-item":
				epf = frontUpdateItemFlags

			case "remove-item":
				epf = frontRemoveItemFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "front":
			c := frontc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "show-character":
				endpoint = c.ShowCharacter()
				data, err = frontc.BuildShowCharacterPayload(*frontShowCharacterIDFlag)
			case "list-characters":
				endpoint = c.ListCharacters()
				data = nil
			case "add-character":
				endpoint = c.AddCharacter()
				data, err = frontc.BuildAddCharacterPayload(*frontAddCharacterBodyFlag)
			case "update-character":
				endpoint = c.UpdateCharacter()
				data, err = frontc.BuildUpdateCharacterPayload(*frontUpdateCharacterBodyFlag, *frontUpdateCharacterIDFlag)
			case "remove-character":
				endpoint = c.RemoveCharacter()
				data, err = frontc.BuildRemoveCharacterPayload(*frontRemoveCharacterIDFlag)
			case "show-inventory":
				endpoint = c.ShowInventory()
				data, err = frontc.BuildShowInventoryPayload(*frontShowInventoryIDFlag)
			case "update-inventory":
				endpoint = c.UpdateInventory()
				data, err = frontc.BuildUpdateInventoryPayload(*frontUpdateInventoryIDFlag, *frontUpdateInventoryItemIDFlag)
			case "remove-inventory":
				endpoint = c.RemoveInventory()
				data, err = frontc.BuildRemoveInventoryPayload(*frontRemoveInventoryIDFlag, *frontRemoveInventoryItemIDFlag)
			case "show-item":
				endpoint = c.ShowItem()
				data, err = frontc.BuildShowItemPayload(*frontShowItemIDFlag)
			case "list-items":
				endpoint = c.ListItems()
				data = nil
			case "add-item":
				endpoint = c.AddItem()
				data, err = frontc.BuildAddItemPayload(*frontAddItemBodyFlag)
			case "update-item":
				endpoint = c.UpdateItem()
				data, err = frontc.BuildUpdateItemPayload(*frontUpdateItemBodyFlag, *frontUpdateItemIDFlag)
			case "remove-item":
				endpoint = c.RemoveItem()
				data, err = frontc.BuildRemoveItemPayload(*frontRemoveItemIDFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// frontUsage displays the usage of the front command and its subcommands.
func frontUsage() {
	fmt.Fprintf(os.Stderr, `Public HTTP frontend
Usage:
    %[1]s [globalflags] front COMMAND [flags]

COMMAND:
    show-character: Get character by ID
    list-characters: Get all characters
    add-character: Create new character
    update-character: Update new character
    remove-character: Remove character from storage
    show-inventory: Show all items held by a character
    update-inventory: Add item to character's inventory
    remove-inventory: Remove item from character's inventory
    show-item: Get item by ID
    list-items: Get all items
    add-item: Create new item
    update-item: Update new item
    remove-item: Remove item from storage

Additional help:
    %[1]s front COMMAND --help
`, os.Args[0])
}
func frontShowCharacterUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] front show-character -id UINT32

Get character by ID
    -id UINT32: ID of character to retrieve

Example:
    %[1]s front show-character --id 3593618710
`, os.Args[0])
}

func frontListCharactersUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] front list-characters

Get all characters

Example:
    %[1]s front list-characters
`, os.Args[0])
}

func frontAddCharacterUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] front add-character -body JSON

Create new character
    -body JSON: 

Example:
    %[1]s front add-character --body '{
      "description": "Quia occaecati nesciunt.",
      "experience": 71,
      "health": 3,
      "name": "6d"
   }'
`, os.Args[0])
}

func frontUpdateCharacterUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] front update-character -body JSON -id UINT32

Update new character
    -body JSON: 
    -id UINT32: ID of character to update

Example:
    %[1]s front update-character --body '{
      "description": "Ex modi cum ea maiores.",
      "experience": 52,
      "health": 23,
      "name": "lir"
   }' --id 2201962452
`, os.Args[0])
}

func frontRemoveCharacterUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] front remove-character -id UINT32

Remove character from storage
    -id UINT32: ID of character to remove

Example:
    %[1]s front remove-character --id 582115159
`, os.Args[0])
}

func frontShowInventoryUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] front show-inventory -id UINT32

Show all items held by a character
    -id UINT32: Character ID

Example:
    %[1]s front show-inventory --id 2065725511
`, os.Args[0])
}

func frontUpdateInventoryUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] front update-inventory -id UINT32 -item-id UINT32

Add item to character's inventory
    -id UINT32: Character ID
    -item-id UINT32: Item ID

Example:
    %[1]s front update-inventory --id 934687439 --item-id 2688619423
`, os.Args[0])
}

func frontRemoveInventoryUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] front remove-inventory -id UINT32 -item-id UINT32

Remove item from character's inventory
    -id UINT32: Character ID
    -item-id UINT32: Item ID

Example:
    %[1]s front remove-inventory --id 8952388 --item-id 975400211
`, os.Args[0])
}

func frontShowItemUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] front show-item -id UINT32

Get item by ID
    -id UINT32: ID of item to retrieve

Example:
    %[1]s front show-item --id 2725781366
`, os.Args[0])
}

func frontListItemsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] front list-items

Get all items

Example:
    %[1]s front list-items
`, os.Args[0])
}

func frontAddItemUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] front add-item -body JSON

Create new item
    -body JSON: 

Example:
    %[1]s front add-item --body '{
      "damage": 1,
      "description": "Consequatur consequatur dolores tenetur adipisci.",
      "healing": 30,
      "name": "q9m",
      "protection": 14
   }'
`, os.Args[0])
}

func frontUpdateItemUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] front update-item -body JSON -id UINT32

Update new item
    -body JSON: 
    -id UINT32: ID of item to update

Example:
    %[1]s front update-item --body '{
      "damage": 4,
      "description": "Officiis rerum non dolor.",
      "healing": 42,
      "name": "dz",
      "protection": 15
   }' --id 2768114862
`, os.Args[0])
}

func frontRemoveItemUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] front remove-item -id UINT32

Remove item from storage
    -id UINT32: ID of item to remove

Example:
    %[1]s front remove-item --id 2412233517
`, os.Args[0])
}
